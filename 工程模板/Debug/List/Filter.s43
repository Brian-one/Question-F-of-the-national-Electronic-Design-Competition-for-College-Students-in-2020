///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V6.30.1.934/W32 for MSP430          12/Oct/2020  03:29:54
// Copyright 1996-2015 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for Texas Instruments MSP430
//
//    __rt_version  =  3
//    __double_size =  32
//    __reg_r4      =  free
//    __reg_r5      =  free
//    __pic         =  no
//    __core        =  430X
//    __data_model  =  large
//    __code_model  =  large
//    Source file   =  
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\User\USER\Filter.c
//    Command line  =  
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\User\USER\Filter.c -D
//        DEBUG -D RAM_VECTOR -lA
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Debug\List\ -o
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Debug\Obj\ --no_cse
//        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
//        -D__MSP430F5529__ -e --double=32 --dlib_config "D:\Program Files
//        (x86)\IAR Systems\Embedded Workbench 7.2\430\lib\dlib\dl430xllff.h"
//        -I G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Drivers\inc\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Drivers\src\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Drivers\src\USB\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Drivers\src\USB\USB_config\
//        -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Drivers\src\USB\USB_User\
//        -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Drivers\srcUSB\USB_API\USB_CDC_API\
//        -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Drivers\src\USB\USB_API\USB_HID_API\
//        -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Drivers\src\USB\USB_API\USB_MSC_API\
//        -I G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\delay\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\18b20\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\KEY\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\LED\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\12864\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\oled\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\mpu6050\inc\
//        -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\mpu6050\src\
//        -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\nokia5110\inc\
//        -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\nokia5110\src\
//        -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\LQ_1.8_TFT\
//        -I G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\LCD_API\
//        -I G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\2.2TFT\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\nrf24l01\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\System\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\System\inc\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\System\src\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\User\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\User\USER\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Lib\UCOSII\CONFIG\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Lib\uCOSII\App\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Lib\uCOSII\CONFIHG\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Lib\uCOSII\PORT\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Lib\UCOSII\CORE\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Lib\FatFs\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Lib\FatFs\option\ -I
//        G:\比赛\2020电赛\MSP430F5529库函数2.6\MSP430F5529库函数2.6\C版\工程模板\User\USER\
//        --core=430X --data_model=large -On --multiplier=32
//        --hw_workaround=CPU40 --code_model=large
//    List file     =  
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Debug\List\Filter.s43
//
///////////////////////////////////////////////////////////////////////////////

        NAME Filter

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__code_model", "large"
        RTMODEL "__core", "430X"
        RTMODEL "__data_model", "large"
        RTMODEL "__dlib_file_descriptor", "1"
        RTMODEL "__double_size", "32"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN ?ClearMemoryWords
        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBLIC Bubbl
        PUBLIC Filter
        PUBLIC Lmt70_Filter
        PUBLIC Mlx90614_Filter
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:20, SP:20, SR:16, R4L:16, R4H:4, R4:20, R5L:16, R5H:4
          CFI Resource R5:20, R6L:16, R6H:4, R6:20, R7L:16, R7H:4, R7:20, R8L:16
          CFI Resource R8H:4, R8:20, R9L:16, R9H:4, R9:20, R10L:16, R10H:4
          CFI Resource R10:20, R11L:16, R11H:4, R11:20, R12L:16, R12H:4, R12:20
          CFI Resource R13L:16, R13H:4, R13:20, R14L:16, R14H:4, R14:20, R15L:16
          CFI Resource R15H:4, R15:20
          CFI ResourceParts R4 R4H, R4L
          CFI ResourceParts R5 R5H, R5L
          CFI ResourceParts R6 R6H, R6L
          CFI ResourceParts R7 R7H, R7L
          CFI ResourceParts R8 R8H, R8L
          CFI ResourceParts R9 R9H, R9L
          CFI ResourceParts R10 R10H, R10L
          CFI ResourceParts R11 R11H, R11L
          CFI ResourceParts R12 R12H, R12L
          CFI ResourceParts R13 R13H, R13L
          CFI ResourceParts R14 R14H, R14L
          CFI ResourceParts R15 R15H, R15L
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L Undefined
          CFI R12H Undefined
          CFI R12 Undefined
          CFI R13L Undefined
          CFI R13H Undefined
          CFI R13 Undefined
          CFI R14L Undefined
          CFI R14H Undefined
          CFI R14 Undefined
          CFI R15L Undefined
          CFI R15H Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon0
        
        EXTERN Temp_3
        EXTERN MemoryRead
        EXTERN _Cast32uto32f
        EXTERN _Div32f
        EXTERN _Add32f
        EXTERN _Cast32sto32f
        EXTERN _CmpLt32f

// G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\User\USER\Filter.c
//    1 #include "Filter.h"
//    2 #include "msp430f5529_i2c.h"
//    3 #include "LMT70.h"
//    4 /*-------------------------------------------------------------------------------
//    5 *  本部分主要为滤波算法
//    6 *  相关数据的滤波处理请添加再末尾                         
//    7 --------------------------------------------------------------------------------*/
//    8 
//    9 /*******************************************************************************
//   10 *  函数名称：Bubbl                           
//   11 *  功能说明：冒泡排序
//   12 *  参数说明：float a[]   ：数据数组
//   13 *           int n 		：数组元素数量
//   14 *  函数返回：无
//   15 *  使用示例：无
//   16 ********************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   17 void Bubbl(float a[],int n)//冒泡排序
Bubbl:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function Bubbl
//   18 {
        PUSHM.A #0x6, R11
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+28
        MOVA    R12, R11
        MOV.W   R13, R9
//   19     int i,j;
//   20     float temp1;
//   21     for(i=0;i<n-1;i++)			//n-1
        MOV.W   #0x0, R8
??Bubbl_1:
        MOV.W   R9, R15
        ADD.W   #0xffff, R15
        CMP.W   R15, R8
        JGE     ??Bubbl_2
//   22     {
//   23         for(j=0;j<n-i-1;j++)	//n-i-1
        MOV.W   #0x0, R10
??Bubbl_0:
        MOV.W   R9, R15
        SUB.W   R8, R15
        ADD.W   #0xffff, R15
        CMP.W   R15, R10
        JGE     ??Bubbl_3
//   24         {
//   25             if(a[j]>a[j+1])		//大于就交换
        MOV.W   R10, R15
        RLAM.A  #0x4, R15
        RRAM.A  #0x4, R15
        RLAM.A  #0x2, R15
        ADDA    R11, R15
        MOV.W   @R15, R14
        MOV.W   0x2(R15), R15
        MOV.W   R10, R13
        ADD.W   #0x1, R13
        RLAM.A  #0x4, R13
        RRAM.A  #0x4, R13
        RLAM.A  #0x2, R13
        ADDA    R11, R13
        MOV.W   @R13, R12
        MOV.W   0x2(R13), R13
          CFI FunCall _CmpLt32f
        CALLA   #_CmpLt32f
        CMP.W   #0x0, R12
        JEQ     ??Bubbl_4
//   26             {
//   27                 temp1 = a[j];
        MOV.W   R10, R15
        RLAM.A  #0x4, R15
        RRAM.A  #0x4, R15
        RLAM.A  #0x2, R15
        ADDA    R11, R15
        MOV.W   @R15, R6
        MOV.W   0x2(R15), R7
//   28                 a[j] = a[j+1];
        MOV.W   R10, R15
        ADD.W   #0x1, R15
        RLAM.A  #0x4, R15
        RRAM.A  #0x4, R15
        RLAM.A  #0x2, R15
        ADDA    R11, R15
        MOV.W   R10, R14
        RLAM.A  #0x4, R14
        RRAM.A  #0x4, R14
        RLAM.A  #0x2, R14
        ADDA    R11, R14
        MOV.W   @R15, 0(R14)
        MOV.W   0x2(R15), 0x2(R14)
//   29                 a[j+1] = temp1;
        MOV.W   R10, R15
        ADD.W   #0x1, R15
        RLAM.A  #0x4, R15
        RRAM.A  #0x4, R15
        RLAM.A  #0x2, R15
        ADDA    R11, R15
        MOV.W   R6, 0(R15)
        MOV.W   R7, 0x2(R15)
//   30             }
//   31         }
??Bubbl_4:
        ADD.W   #0x1, R10
        JMP     ??Bubbl_0
//   32     }
??Bubbl_3:
        ADD.W   #0x1, R8
        JMP     ??Bubbl_1
//   33 }
??Bubbl_2:
        POPM.A  #0x6, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock0
//   34 
//   35 /*******************************************************************************
//   36 *  函数名称：Filter                           
//   37 *  功能说明：对数据进行滤波
//   38 *  参数说明：float a[]   ：数据数组
//   39 *           int n 		：数组元素数量
//   40 *  函数返回：av_value
//   41 *  使用示例：Filter(Mlx90614_Temp,10);
//   42 ********************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   43 float Filter(float a[],int n)
Filter:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function Filter
//   44 {
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        MOVA    R12, R11
        MOV.W   R13, R6
//   45 	int i = 0;
        MOV.W   #0x0, R10
//   46 	float data_sum1 = 0;
        MOV.W   #0x0, R8
        MOV.W   #0x0, R9
//   47 	float av_value = 0;
        MOV.W   #0x0, R4
        MOV.W   #0x0, R5
//   48 	Bubbl(a,n);			//排序
        MOV.W   R6, R13
        MOVA    R11, R12
          CFI FunCall Bubbl
        CALLA   #Bubbl
//   49 	for(i=0;i<n-1;i++)  		//去除最大最小值
        MOV.W   #0x0, R10
??Filter_0:
        MOV.W   R6, R15
        ADD.W   #0xffff, R15
        CMP.W   R15, R10
        JGE     ??Filter_2
//   50 	{
//   51 		a[i] = a[i+1];
        MOV.W   R10, R15
        ADD.W   #0x1, R15
        RLAM.A  #0x4, R15
        RRAM.A  #0x4, R15
        RLAM.A  #0x2, R15
        ADDA    R11, R15
        MOV.W   R10, R14
        RLAM.A  #0x4, R14
        RRAM.A  #0x4, R14
        RLAM.A  #0x2, R14
        ADDA    R11, R14
        MOV.W   @R15, 0(R14)
        MOV.W   0x2(R15), 0x2(R14)
//   52 	}	 
        ADD.W   #0x1, R10
        JMP     ??Filter_0
//   53 	for(i = 0;i < (n-2);i++)	//均值滤波
??Filter_2:
        MOV.W   #0x0, R10
??Filter_1:
        MOV.W   R6, R15
        ADD.W   #0xfffe, R15
        CMP.W   R15, R10
        JGE     ??Filter_3
//   54 	{
//   55 		data_sum1 = data_sum1 + a[i];
        MOV.W   R10, R15
        RLAM.A  #0x4, R15
        RRAM.A  #0x4, R15
        RLAM.A  #0x2, R15
        ADDA    R11, R15
        MOV.W   @R15, R14
        MOV.W   0x2(R15), R15
        MOV.W   R8, R12
        MOV.W   R9, R13
          CFI FunCall _Add32f
        CALLA   #_Add32f
        MOV.W   R12, R8
        MOV.W   R13, R9
//   56  
//   57 	}
        ADD.W   #0x1, R10
        JMP     ??Filter_1
//   58 	av_value = data_sum1 / (n-2);
??Filter_3:
        MOV.W   R6, R12
        ADD.W   #0xfffe, R12
        MOV.W   R12, R13
        XOR.W   #0xffff, R13
        RLA.W   R13
        SUBC.W  R13, R13
          CFI FunCall _Cast32sto32f
        CALLA   #_Cast32sto32f
        MOV.W   R12, R14
        MOV.W   R13, R15
        MOV.W   R8, R12
        MOV.W   R9, R13
          CFI FunCall _Div32f
        CALLA   #_Div32f
        MOV.W   R12, R4
        MOV.W   R13, R5
//   59 	
//   60 	return av_value;
        MOV.W   R4, R12
        MOV.W   R5, R13
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock1
//   61 }
//   62 
//   63 /*******************************************************************************
//   64 *  函数名称：Mlx90614_Filter                           
//   65 *  功能说明：得到Mlx90614滤波后的温度值
//   66 *  参数说明：无
//   67 *  函数返回：温度
//   68 *  使用示例：无
//   69 ********************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   70 float Mlx90614_Filter()
Mlx90614_Filter:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function Mlx90614_Filter
//   71 {
        PUSHM.A #0x1, R10
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+8
        SUB.W   #0x28, SP
          CFI CFA SP+48
//   72 	int i;
//   73 	float Mlx90614_Temp[10] = {0};
        MOV.W   SP, R12
        MOV.W   #0x14, R14
          CFI FunCall ?ClearMemoryWords
        CALLA   #?ClearMemoryWords
//   74 	for(i = 0; i < 10; i++)
        MOV.W   #0x0, R10
??Mlx90614_Filter_0:
        CMP.W   #0xa, R10
        JGE     ??Mlx90614_Filter_1
//   75 	{
//   76 		Mlx90614_Temp[i] = MemoryRead(I2C0) / 50.0 -273.15;
        MOV.B   #0x2, R12
          CFI FunCall MemoryRead
        CALLA   #MemoryRead
          CFI FunCall _Cast32uto32f
        CALLA   #_Cast32uto32f
        MOV.W   #0x0, R14
        MOV.W   #0x4248, R15
          CFI FunCall _Div32f
        CALLA   #_Div32f
        MOV.W   #0x9333, R14
        MOV.W   #0xc388, R15
          CFI FunCall _Add32f
        CALLA   #_Add32f
        MOV.W   R10, R15
        RLAM.W  #0x2, R15
        ADD.W   SP, R15
        MOV.W   R12, 0(R15)
        MOV.W   R13, 0x2(R15)
//   77 	}
        ADD.W   #0x1, R10
        JMP     ??Mlx90614_Filter_0
//   78 	return Filter(Mlx90614_Temp,10);
??Mlx90614_Filter_1:
        MOV.W   #0xa, R13
        MOV.W   SP, R12
          CFI FunCall Filter
        CALLA   #Filter
        ADD.W   #0x28, SP
          CFI CFA SP+8
        POPM.A  #0x1, R10
          CFI R10H SameValue
          CFI R10L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock2
//   79 }

        RSEG DATA16_C:CONST:SORT:NOROOT(1)
        DC32 0H
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
//   80 
//   81 /*******************************************************************************
//   82 *  函数名称：Lmt70_Filter                           
//   83 *  功能说明：得到Lmt70滤波后的温度值
//   84 *  参数说明：无
//   85 *  函数返回：温度
//   86 *  使用示例：无
//   87 ********************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   88 float Lmt70_Filter()
Lmt70_Filter:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function Lmt70_Filter
//   89 {
        PUSHM.A #0x1, R10
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+8
        SUB.W   #0x28, SP
          CFI CFA SP+48
//   90 	int i;
//   91 	float Lmt70_Temp[10] = {0};
        MOV.W   SP, R12
        MOV.W   #0x14, R14
          CFI FunCall ?ClearMemoryWords
        CALLA   #?ClearMemoryWords
//   92 	for(i = 0; i < 10; i++)
        MOV.W   #0x0, R10
??Lmt70_Filter_0:
        CMP.W   #0xa, R10
        JGE     ??Lmt70_Filter_1
//   93 	{
//   94 		Lmt70_Temp[i] = Temp_3();
          CFI FunCall Temp_3
        CALLA   #Temp_3
        MOV.W   R10, R15
        RLAM.W  #0x2, R15
        ADD.W   SP, R15
        MOV.W   R12, 0(R15)
        MOV.W   R13, 0x2(R15)
//   95 	}
        ADD.W   #0x1, R10
        JMP     ??Lmt70_Filter_0
//   96 	return Filter(Lmt70_Temp,10);
??Lmt70_Filter_1:
        MOV.W   #0xa, R13
        MOV.W   SP, R12
          CFI FunCall Filter
        CALLA   #Filter
        ADD.W   #0x28, SP
          CFI CFA SP+8
        POPM.A  #0x1, R10
          CFI R10H SameValue
          CFI R10L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock3
//   97 }

        RSEG DATA16_C:CONST:SORT:NOROOT(1)
        DC32 0H
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

        RSEG CODE:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG CODE:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
// 
// 462 bytes in segment CODE
//  80 bytes in segment DATA16_C
// 
// 462 bytes of CODE  memory
//  80 bytes of CONST memory
//
//Errors: none
//Warnings: none
