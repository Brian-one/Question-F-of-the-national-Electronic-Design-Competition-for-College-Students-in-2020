///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V6.30.1.934/W32 for MSP430          12/Oct/2020  03:29:58
// Copyright 1996-2015 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for Texas Instruments MSP430
//
//    __rt_version  =  3
//    __double_size =  32
//    __reg_r4      =  free
//    __reg_r5      =  free
//    __pic         =  no
//    __core        =  430X
//    __data_model  =  large
//    __code_model  =  large
//    Source file   =  
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\User\USER\PID.c
//    Command line  =  
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\User\USER\PID.c -D
//        DEBUG -D RAM_VECTOR -lA
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Debug\List\ -o
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Debug\Obj\ --no_cse
//        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
//        -D__MSP430F5529__ -e --double=32 --dlib_config "D:\Program Files
//        (x86)\IAR Systems\Embedded Workbench 7.2\430\lib\dlib\dl430xllff.h"
//        -I G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Drivers\inc\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Drivers\src\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Drivers\src\USB\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Drivers\src\USB\USB_config\
//        -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Drivers\src\USB\USB_User\
//        -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Drivers\srcUSB\USB_API\USB_CDC_API\
//        -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Drivers\src\USB\USB_API\USB_HID_API\
//        -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Drivers\src\USB\USB_API\USB_MSC_API\
//        -I G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\delay\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\18b20\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\KEY\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\LED\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\12864\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\oled\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\mpu6050\inc\
//        -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\mpu6050\src\
//        -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\nokia5110\inc\
//        -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\nokia5110\src\
//        -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\LQ_1.8_TFT\
//        -I G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\LCD_API\
//        -I G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\2.2TFT\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\nrf24l01\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\System\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\System\inc\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\System\src\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\User\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\User\USER\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Lib\UCOSII\CONFIG\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Lib\uCOSII\App\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Lib\uCOSII\CONFIHG\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Lib\uCOSII\PORT\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Lib\UCOSII\CORE\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Lib\FatFs\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Lib\FatFs\option\ -I
//        G:\比赛\2020电赛\MSP430F5529库函数2.6\MSP430F5529库函数2.6\C版\工程模板\User\USER\
//        --core=430X --data_model=large -On --multiplier=32
//        --hw_workaround=CPU40 --code_model=large
//    List file     =  
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Debug\List\PID.s43
//
///////////////////////////////////////////////////////////////////////////////

        NAME PID

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__code_model", "large"
        RTMODEL "__core", "430X"
        RTMODEL "__data_model", "large"
        RTMODEL "__double_size", "32"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBLIC Increment_PID_Cal
        PUBLIC PID_Cal
        PUBLIC PID_Init
        PUBLIC PID_SetIntegralOutRange
        PUBLIC PID_SetOutRange
        PUBLIC PID_SetPoint
        PUBLIC Position_PID_Cal
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:20, SP:20, SR:16, R4L:16, R4H:4, R4:20, R5L:16, R5H:4
          CFI Resource R5:20, R6L:16, R6H:4, R6:20, R7L:16, R7H:4, R7:20, R8L:16
          CFI Resource R8H:4, R8:20, R9L:16, R9H:4, R9:20, R10L:16, R10H:4
          CFI Resource R10:20, R11L:16, R11H:4, R11:20, R12L:16, R12H:4, R12:20
          CFI Resource R13L:16, R13H:4, R13:20, R14L:16, R14H:4, R14:20, R15L:16
          CFI Resource R15H:4, R15:20
          CFI ResourceParts R4 R4H, R4L
          CFI ResourceParts R5 R5H, R5L
          CFI ResourceParts R6 R6H, R6L
          CFI ResourceParts R7 R7H, R7L
          CFI ResourceParts R8 R8H, R8L
          CFI ResourceParts R9 R9H, R9L
          CFI ResourceParts R10 R10H, R10L
          CFI ResourceParts R11 R11H, R11L
          CFI ResourceParts R12 R12H, R12L
          CFI ResourceParts R13 R13H, R13L
          CFI ResourceParts R14 R14H, R14L
          CFI ResourceParts R15 R15H, R15L
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L Undefined
          CFI R12H Undefined
          CFI R12 Undefined
          CFI R13L Undefined
          CFI R13H Undefined
          CFI R13 Undefined
          CFI R14L Undefined
          CFI R14H Undefined
          CFI R14 Undefined
          CFI R15L Undefined
          CFI R15H Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon0
        
        EXTERN _Sub32f
        EXTERN _Add32f
        EXTERN _Mul32f
        EXTERN _CmpLt32f

// G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\User\USER\PID.c
//    1 #include"PID.h"
//    2 #include"math.h"
//    3 
//    4 //初始化PID结构体参数

        RSEG CODE:CODE:REORDER:NOROOT(1)
//    5 void PID_Init(PID * s_PID,PID_VAR_TYPE set_point,PID_VAR_TYPE Proportion,PID_VAR_TYPE Integral, PID_VAR_TYPE Derivative)
PID_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function PID_Init
          CFI NoCalls
//    6 {
        PUSHM.A #0x6, R11
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+28
        MOV.W   0x1c(SP), R10
        MOV.W   0x1e(SP), R11
        MOV.W   0x20(SP), R8
        MOV.W   0x22(SP), R9
        MOV.W   0x24(SP), R6
        MOV.W   0x26(SP), R7
//    7    s_PID->SetPoint = set_point;
        MOV.W   R14, 0(R12)
        MOV.W   R15, 0x2(R12)
//    8    s_PID->Proportion = Proportion;
        MOV.W   R10, 0x4(R12)
        MOV.W   R11, 0x6(R12)
//    9    s_PID->Integral = Integral;
        MOV.W   R8, 0x8(R12)
        MOV.W   R9, 0xa(R12)
//   10    s_PID->Derivative = Derivative;
        MOV.W   R6, 0xc(R12)
        MOV.W   R7, 0xe(R12)
//   11    s_PID->Error = 0;
        MOV.W   #0x0, 0x14(R12)
        MOV.W   #0x0, 0x16(R12)
//   12    s_PID->LastError = 0;
        MOV.W   #0x0, 0x18(R12)
        MOV.W   #0x0, 0x1a(R12)
//   13    s_PID->PrevError = 0;
        MOV.W   #0x0, 0x1c(R12)
        MOV.W   #0x0, 0x1e(R12)
//   14    s_PID->SumError = 0;
        MOV.W   #0x0, 0x10(R12)
        MOV.W   #0x0, 0x12(R12)
//   15    s_PID->LastResult = 0;
        MOV.W   #0x0, 0x20(R12)
        MOV.W   #0x0, 0x22(R12)
//   16    s_PID->Result = 0;
        MOV.W   #0x0, 0x24(R12)
        MOV.W   #0x0, 0x26(R12)
//   17    s_PID->OutMax = DEFAULT_PID_OUT_MAX;
        MOV.W   #0x4000, 0x28(R12)
        MOV.W   #0x461c, 0x2a(R12)
//   18    s_PID->OutMin = DEFAULT_PID_OUT_MIN;
        MOV.W   #0x4000, 0x2c(R12)
        MOV.W   #0xc61c, 0x2e(R12)
//   19    s_PID->IntegralMax = DEFAULT_PID_INTEGRAL_OUT_MAX;
        MOV.W   #0x4000, 0x30(R12)
        MOV.W   #0x461c, 0x32(R12)
//   20    s_PID->IntegralMin = DEFAULT_PID_INTEGRAL_OUT_MIN;
        MOV.W   #0x4000, 0x34(R12)
        MOV.W   #0xc61c, 0x36(R12)
//   21 }
        POPM.A  #0x6, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock0
//   22 //设置目标值

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   23 void  PID_SetPoint     (PID * s_PID, PID_VAR_TYPE set_point) 
PID_SetPoint:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function PID_SetPoint
          CFI NoCalls
//   24 {
//   25    s_PID->SetPoint = set_point;
        MOV.W   R14, 0(R12)
        MOV.W   R15, 0x2(R12)
//   26 }      
        RETA
          CFI EndBlock cfiBlock1
//   27 //设置PID输出范围

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   28 void  PID_SetOutRange  (PID * s_PID, PID_VAR_TYPE outMax,PID_VAR_TYPE outMin)
PID_SetOutRange:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function PID_SetOutRange
          CFI NoCalls
//   29 {
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        MOV.W   0xc(SP), R10
        MOV.W   0xe(SP), R11
//   30   s_PID->OutMax = outMax;
        MOV.W   R14, 0x28(R12)
        MOV.W   R15, 0x2a(R12)
//   31   s_PID->OutMin = outMin;
        MOV.W   R10, 0x2c(R12)
        MOV.W   R11, 0x2e(R12)
//   32 }
        POPM.A  #0x2, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock2
//   33 //设置PID积分范围

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   34 void  PID_SetIntegralOutRange(PID * s_PID, PID_VAR_TYPE outMax,PID_VAR_TYPE outMin)
PID_SetIntegralOutRange:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function PID_SetIntegralOutRange
          CFI NoCalls
//   35 {
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        MOV.W   0xc(SP), R10
        MOV.W   0xe(SP), R11
//   36   s_PID->IntegralMax = outMax;
        MOV.W   R14, 0x30(R12)
        MOV.W   R15, 0x32(R12)
//   37   s_PID->IntegralMin = outMin;
        MOV.W   R10, 0x34(R12)
        MOV.W   R11, 0x36(R12)
//   38 }
        POPM.A  #0x2, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock3
//   39 //增量式PID计算

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   40 PID_VAR_TYPE Increment_PID_Cal(PID * s_PID,PID_VAR_TYPE now_point)
Increment_PID_Cal:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function Increment_PID_Cal
//   41 {
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        PUSH.W  R15
          CFI CFA SP+38
        PUSH.W  R14
          CFI CFA SP+40
        SUB.W   #0x4, SP
          CFI CFA SP+44
        MOVA    R12, R8
//   42     s_PID->LastResult = s_PID->Result;					       // 简单赋值运算	
        MOV.W   0x24(R8), 0x20(R8)
        MOV.W   0x26(R8), 0x22(R8)
//   43     //误差计算   
//   44     s_PID->Error = s_PID->SetPoint - now_point;
        MOV.W   0x4(SP), R14
        MOV.W   0x6(SP), R15
        MOV.W   @R8, R12
        MOV.W   0x2(R8), R13
          CFI FunCall _Sub32f
        CALLA   #_Sub32f
        MOV.W   R12, 0x14(R8)
        MOV.W   R13, 0x16(R8)
//   45     //PID计算   
//   46     s_PID->Result = s_PID->LastResult 
//   47                   + s_PID->Proportion  * (s_PID->Error - s_PID->LastError)                          // 比例项
//   48                   + s_PID->Integral    *  s_PID->Error	                                       // 积分项 
//   49                   + s_PID->Derivative  * (s_PID->Error - 2*(s_PID->LastError) + s_PID->PrevError);  // 微分项
        MOV.W   0x18(R8), R14
        MOV.W   0x1a(R8), R15
        MOV.W   0x14(R8), R12
        MOV.W   0x16(R8), R13
          CFI FunCall _Sub32f
        CALLA   #_Sub32f
        MOV.W   R12, R4
        MOV.W   R13, R5
        MOV.W   0x4(R8), R14
        MOV.W   0x6(R8), R15
        MOV.W   R4, R12
        MOV.W   R5, R13
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   R12, R10
        MOV.W   R13, R11
        MOV.W   0x14(R8), R14
        MOV.W   0x16(R8), R15
        MOV.W   0x8(R8), R12
        MOV.W   0xa(R8), R13
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   R12, R4
        MOV.W   R13, R5
        MOV.W   0x20(R8), R14
        MOV.W   0x22(R8), R15
        MOV.W   R10, R12
        MOV.W   R11, R13
          CFI FunCall _Add32f
        CALLA   #_Add32f
        MOV.W   R12, 0(SP)
        MOV.W   R13, 0x2(SP)
        MOV.W   #0x0, R14
        MOV.W   #0x4000, R15
        MOV.W   0x18(R8), R12
        MOV.W   0x1a(R8), R13
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   R12, R10
        MOV.W   R13, R11
        MOV.W   R10, R14
        MOV.W   R11, R15
        MOV.W   0x14(R8), R12
        MOV.W   0x16(R8), R13
          CFI FunCall _Sub32f
        CALLA   #_Sub32f
        MOV.W   R12, R6
        MOV.W   R13, R7
        MOV.W   0x1c(R8), R14
        MOV.W   0x1e(R8), R15
        MOV.W   R6, R12
        MOV.W   R7, R13
          CFI FunCall _Add32f
        CALLA   #_Add32f
        MOV.W   R12, R10
        MOV.W   R13, R11
        MOV.W   0xc(R8), R14
        MOV.W   0xe(R8), R15
        MOV.W   R10, R12
        MOV.W   R11, R13
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   R12, R6
        MOV.W   R13, R7
        MOV.W   R4, R14
        MOV.W   R5, R15
        MOV.W   @SP, R12
        MOV.W   0x2(SP), R13
          CFI FunCall _Add32f
        CALLA   #_Add32f
        MOV.W   R12, R10
        MOV.W   R13, R11
        MOV.W   R6, R14
        MOV.W   R7, R15
        MOV.W   R10, R12
        MOV.W   R11, R13
          CFI FunCall _Add32f
        CALLA   #_Add32f
        MOV.W   R12, 0x24(R8)
        MOV.W   R13, 0x26(R8)
//   50    
//   51     s_PID->PrevError = s_PID->LastError;		               // 简单赋值运算
        MOV.W   0x18(R8), 0x1c(R8)
        MOV.W   0x1a(R8), 0x1e(R8)
//   52     s_PID->LastError = s_PID->Error; 				       // 简单赋值运算
        MOV.W   0x14(R8), 0x18(R8)
        MOV.W   0x16(R8), 0x1a(R8)
//   53     //输出限幅
//   54     if(s_PID->Result > s_PID->OutMax)s_PID->Result = s_PID->OutMax;
        MOV.W   0x24(R8), R14
        MOV.W   0x26(R8), R15
        MOV.W   0x28(R8), R12
        MOV.W   0x2a(R8), R13
          CFI FunCall _CmpLt32f
        CALLA   #_CmpLt32f
        CMP.W   #0x0, R12
        JEQ     ??Increment_PID_Cal_0
        MOV.W   0x28(R8), 0x24(R8)
        MOV.W   0x2a(R8), 0x26(R8)
        JMP     ??Increment_PID_Cal_1
//   55     else if(s_PID->Result < s_PID->OutMin)s_PID->Result = s_PID->OutMin;
??Increment_PID_Cal_0:
        MOV.W   0x2c(R8), R14
        MOV.W   0x2e(R8), R15
        MOV.W   0x24(R8), R12
        MOV.W   0x26(R8), R13
          CFI FunCall _CmpLt32f
        CALLA   #_CmpLt32f
        CMP.W   #0x0, R12
        JEQ     ??Increment_PID_Cal_1
        MOV.W   0x2c(R8), 0x24(R8)
        MOV.W   0x2e(R8), 0x26(R8)
//   56     
//   57     return s_PID->Result;	
??Increment_PID_Cal_1:
        MOV.W   0x24(R8), R12
        MOV.W   0x26(R8), R13
        ADD.W   #0x8, SP
          CFI CFA SP+36
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock4
//   58 }
//   59 //位置式PID计算

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   60 PID_VAR_TYPE Position_PID_Cal(PID * s_PID,PID_VAR_TYPE now_point)
Position_PID_Cal:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function Position_PID_Cal
//   61 {
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        PUSH.W  R15
          CFI CFA SP+38
        PUSH.W  R14
          CFI CFA SP+40
        MOVA    R12, R8
//   62     s_PID->LastResult = s_PID->Result;			       // 简单赋值运算
        MOV.W   0x24(R8), 0x20(R8)
        MOV.W   0x26(R8), 0x22(R8)
//   63     //误差计算
//   64     s_PID->Error = s_PID->SetPoint - now_point;
        MOV.W   @SP, R14
        MOV.W   0x2(SP), R15
        MOV.W   @R8, R12
        MOV.W   0x2(R8), R13
          CFI FunCall _Sub32f
        CALLA   #_Sub32f
        MOV.W   R12, 0x14(R8)
        MOV.W   R13, 0x16(R8)
//   65     s_PID->SumError += s_PID->Error;                            //积分误差累加
        MOV.W   0x14(R8), R14
        MOV.W   0x16(R8), R15
        MOV.W   0x10(R8), R12
        MOV.W   0x12(R8), R13
          CFI FunCall _Add32f
        CALLA   #_Add32f
        MOV.W   R12, 0x10(R8)
        MOV.W   R13, 0x12(R8)
//   66     //积分限幅
//   67     PID_VAR_TYPE IOutValue = s_PID->SumError * s_PID->Integral;
        MOV.W   0x8(R8), R14
        MOV.W   0xa(R8), R15
        MOV.W   0x10(R8), R12
        MOV.W   0x12(R8), R13
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   R12, R10
        MOV.W   R13, R11
//   68     if(IOutValue > s_PID->IntegralMax)IOutValue = s_PID->IntegralMax;
        MOV.W   R10, R14
        MOV.W   R11, R15
        MOV.W   0x30(R8), R12
        MOV.W   0x32(R8), R13
          CFI FunCall _CmpLt32f
        CALLA   #_CmpLt32f
        CMP.W   #0x0, R12
        JEQ     ??Position_PID_Cal_0
        MOV.W   0x30(R8), R10
        MOV.W   0x32(R8), R11
        JMP     ??Position_PID_Cal_1
//   69     else if(IOutValue < s_PID->IntegralMin)IOutValue = s_PID->IntegralMin;
??Position_PID_Cal_0:
        MOV.W   0x34(R8), R14
        MOV.W   0x36(R8), R15
        MOV.W   R10, R12
        MOV.W   R11, R13
          CFI FunCall _CmpLt32f
        CALLA   #_CmpLt32f
        CMP.W   #0x0, R12
        JEQ     ??Position_PID_Cal_1
        MOV.W   0x34(R8), R10
        MOV.W   0x36(R8), R11
//   70     //PID计算
//   71     s_PID->Result =  s_PID->Proportion  *  s_PID->Error                          // 比例项
//   72                    + IOutValue                                                     // 积分项 
//   73                    + s_PID->Derivative  * (s_PID->Error - s_PID->LastError);     // 微分项
??Position_PID_Cal_1:
        MOV.W   0x14(R8), R14
        MOV.W   0x16(R8), R15
        MOV.W   0x4(R8), R12
        MOV.W   0x6(R8), R13
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   R12, R4
        MOV.W   R13, R5
        MOV.W   0x18(R8), R14
        MOV.W   0x1a(R8), R15
        MOV.W   0x14(R8), R12
        MOV.W   0x16(R8), R13
          CFI FunCall _Sub32f
        CALLA   #_Sub32f
        MOV.W   0xc(R8), R14
        MOV.W   0xe(R8), R15
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   R12, R6
        MOV.W   R13, R7
        MOV.W   R10, R14
        MOV.W   R11, R15
        MOV.W   R4, R12
        MOV.W   R5, R13
          CFI FunCall _Add32f
        CALLA   #_Add32f
        MOV.W   R6, R14
        MOV.W   R7, R15
          CFI FunCall _Add32f
        CALLA   #_Add32f
        MOV.W   R12, 0x24(R8)
        MOV.W   R13, 0x26(R8)
//   74     
//   75     s_PID->PrevError = s_PID->LastError;		                       // 简单赋值运算
        MOV.W   0x18(R8), 0x1c(R8)
        MOV.W   0x1a(R8), 0x1e(R8)
//   76     s_PID->LastError = s_PID->Error; 				       // 简单赋值运算
        MOV.W   0x14(R8), 0x18(R8)
        MOV.W   0x16(R8), 0x1a(R8)
//   77  
//   78     //输出限幅
//   79     if(s_PID->Result > s_PID->OutMax)s_PID->Result = s_PID->OutMax;
        MOV.W   0x24(R8), R14
        MOV.W   0x26(R8), R15
        MOV.W   0x28(R8), R12
        MOV.W   0x2a(R8), R13
          CFI FunCall _CmpLt32f
        CALLA   #_CmpLt32f
        CMP.W   #0x0, R12
        JEQ     ??Position_PID_Cal_2
        MOV.W   0x28(R8), 0x24(R8)
        MOV.W   0x2a(R8), 0x26(R8)
        JMP     ??Position_PID_Cal_3
//   80     else if(s_PID->Result < s_PID->OutMin)s_PID->Result = s_PID->OutMin;
??Position_PID_Cal_2:
        MOV.W   0x2c(R8), R14
        MOV.W   0x2e(R8), R15
        MOV.W   0x24(R8), R12
        MOV.W   0x26(R8), R13
          CFI FunCall _CmpLt32f
        CALLA   #_CmpLt32f
        CMP.W   #0x0, R12
        JEQ     ??Position_PID_Cal_3
        MOV.W   0x2c(R8), 0x24(R8)
        MOV.W   0x2e(R8), 0x26(R8)
//   81     
//   82     return s_PID->Result;	
??Position_PID_Cal_3:
        MOV.W   0x24(R8), R12
        MOV.W   0x26(R8), R13
        ADD.W   #0x4, SP
          CFI CFA SP+36
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock5
//   83 }
//   84 //比例外置式PID

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   85 PID_VAR_TYPE PID_Cal(PID * s_PID,PID_VAR_TYPE now_point)
PID_Cal:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function PID_Cal
//   86 {  
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        MOVA    R12, R8
        MOV.W   R14, R4
        MOV.W   R15, R5
//   87     s_PID->LastResult = s_PID->Result;			       // 简单赋值运算
        MOV.W   0x24(R8), 0x20(R8)
        MOV.W   0x26(R8), 0x22(R8)
//   88     //误差计算
//   89     s_PID->Error = s_PID->SetPoint - now_point;
        MOV.W   R4, R14
        MOV.W   R5, R15
        MOV.W   @R8, R12
        MOV.W   0x2(R8), R13
          CFI FunCall _Sub32f
        CALLA   #_Sub32f
        MOV.W   R12, 0x14(R8)
        MOV.W   R13, 0x16(R8)
//   90     s_PID->SumError += s_PID->Error;                            //积分误差累加
        MOV.W   0x14(R8), R14
        MOV.W   0x16(R8), R15
        MOV.W   0x10(R8), R12
        MOV.W   0x12(R8), R13
          CFI FunCall _Add32f
        CALLA   #_Add32f
        MOV.W   R12, 0x10(R8)
        MOV.W   R13, 0x12(R8)
//   91     //积分限幅
//   92     PID_VAR_TYPE IOutValue = s_PID->SumError * s_PID->Integral;
        MOV.W   0x8(R8), R14
        MOV.W   0xa(R8), R15
        MOV.W   0x10(R8), R12
        MOV.W   0x12(R8), R13
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   R12, R10
        MOV.W   R13, R11
//   93     if(IOutValue > s_PID->IntegralMax)IOutValue = s_PID->IntegralMax;
        MOV.W   R10, R14
        MOV.W   R11, R15
        MOV.W   0x30(R8), R12
        MOV.W   0x32(R8), R13
          CFI FunCall _CmpLt32f
        CALLA   #_CmpLt32f
        CMP.W   #0x0, R12
        JEQ     ??PID_Cal_0
        MOV.W   0x30(R8), R10
        MOV.W   0x32(R8), R11
        JMP     ??PID_Cal_1
//   94     else if(IOutValue < s_PID->IntegralMin)IOutValue = s_PID->IntegralMin;
??PID_Cal_0:
        MOV.W   0x34(R8), R14
        MOV.W   0x36(R8), R15
        MOV.W   R10, R12
        MOV.W   R11, R13
          CFI FunCall _CmpLt32f
        CALLA   #_CmpLt32f
        CMP.W   #0x0, R12
        JEQ     ??PID_Cal_1
        MOV.W   0x34(R8), R10
        MOV.W   0x36(R8), R11
//   95     //PID计算   
//   96     s_PID->Result = s_PID->Proportion *
//   97        (s_PID->Error + IOutValue + s_PID->Derivative * (s_PID->Error - s_PID->LastError) );
??PID_Cal_1:
        MOV.W   0x18(R8), R14
        MOV.W   0x1a(R8), R15
        MOV.W   0x14(R8), R12
        MOV.W   0x16(R8), R13
          CFI FunCall _Sub32f
        CALLA   #_Sub32f
        MOV.W   0xc(R8), R14
        MOV.W   0xe(R8), R15
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   R12, R6
        MOV.W   R13, R7
        MOV.W   R10, R14
        MOV.W   R11, R15
        MOV.W   0x14(R8), R12
        MOV.W   0x16(R8), R13
          CFI FunCall _Add32f
        CALLA   #_Add32f
        MOV.W   R6, R14
        MOV.W   R7, R15
          CFI FunCall _Add32f
        CALLA   #_Add32f
        MOV.W   0x4(R8), R14
        MOV.W   0x6(R8), R15
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   R12, 0x24(R8)
        MOV.W   R13, 0x26(R8)
//   98    
//   99     s_PID->PrevError = s_PID->LastError;		                       // 简单赋值运算
        MOV.W   0x18(R8), 0x1c(R8)
        MOV.W   0x1a(R8), 0x1e(R8)
//  100     s_PID->LastError = s_PID->Error; 				       // 简单赋值运算
        MOV.W   0x14(R8), 0x18(R8)
        MOV.W   0x16(R8), 0x1a(R8)
//  101     //输出限幅
//  102     if(s_PID->Result > s_PID->OutMax)s_PID->Result = s_PID->OutMax;
        MOV.W   0x24(R8), R14
        MOV.W   0x26(R8), R15
        MOV.W   0x28(R8), R12
        MOV.W   0x2a(R8), R13
          CFI FunCall _CmpLt32f
        CALLA   #_CmpLt32f
        CMP.W   #0x0, R12
        JEQ     ??PID_Cal_2
        MOV.W   0x28(R8), 0x24(R8)
        MOV.W   0x2a(R8), 0x26(R8)
        JMP     ??PID_Cal_3
//  103     else if(s_PID->Result < s_PID->OutMin)s_PID->Result = s_PID->OutMin;
??PID_Cal_2:
        MOV.W   0x2c(R8), R14
        MOV.W   0x2e(R8), R15
        MOV.W   0x24(R8), R12
        MOV.W   0x26(R8), R13
          CFI FunCall _CmpLt32f
        CALLA   #_CmpLt32f
        CMP.W   #0x0, R12
        JEQ     ??PID_Cal_3
        MOV.W   0x2c(R8), 0x24(R8)
        MOV.W   0x2e(R8), 0x26(R8)
//  104     
//  105     return s_PID->Result;
??PID_Cal_3:
        MOV.W   0x24(R8), R12
        MOV.W   0x26(R8), R13
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock6
//  106 }

        RSEG CODE:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG CODE:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
// 
// 1 296 bytes in segment CODE
// 
// 1 296 bytes of CODE memory
//
//Errors: none
//Warnings: none
