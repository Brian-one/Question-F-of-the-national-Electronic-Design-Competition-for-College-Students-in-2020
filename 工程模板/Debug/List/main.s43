///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V6.30.1.934/W32 for MSP430          13/Oct/2020  18:23:31
// Copyright 1996-2015 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for Texas Instruments MSP430
//
//    __rt_version  =  3
//    __double_size =  32
//    __reg_r4      =  free
//    __reg_r5      =  free
//    __pic         =  no
//    __core        =  430X
//    __data_model  =  large
//    __code_model  =  large
//    Source file   =  
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\User\main.c
//    Command line  =  
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\User\main.c -D DEBUG
//        -D RAM_VECTOR -lA
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Debug\List\ -o
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Debug\Obj\ --no_cse
//        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
//        -D__MSP430F5529__ -e --double=32 --dlib_config "D:\Program Files
//        (x86)\IAR Systems\Embedded Workbench 7.2\430\lib\dlib\dl430xllff.h"
//        -I G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Drivers\inc\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Drivers\src\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Drivers\src\USB\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Drivers\src\USB\USB_config\
//        -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Drivers\src\USB\USB_User\
//        -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Drivers\srcUSB\USB_API\USB_CDC_API\
//        -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Drivers\src\USB\USB_API\USB_HID_API\
//        -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Drivers\src\USB\USB_API\USB_MSC_API\
//        -I G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\delay\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\18b20\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\KEY\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\LED\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\12864\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\oled\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\mpu6050\inc\
//        -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\mpu6050\src\
//        -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\nokia5110\inc\
//        -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\nokia5110\src\
//        -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\LQ_1.8_TFT\
//        -I G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\LCD_API\
//        -I G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\2.2TFT\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\nrf24l01\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\System\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\System\inc\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\System\src\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\User\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\User\USER\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Lib\UCOSII\CONFIG\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Lib\uCOSII\App\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Lib\uCOSII\CONFIHG\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Lib\uCOSII\PORT\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Lib\UCOSII\CORE\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Lib\FatFs\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Lib\FatFs\option\ -I
//        G:\比赛\2020电赛\MSP430F5529库函数2.6\MSP430F5529库函数2.6\C版\工程模板\User\USER\
//        --core=430X --data_model=large -On --multiplier=32
//        --hw_workaround=CPU40 --code_model=large
//    List file     =  
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Debug\List\main.s43
//
///////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__code_model", "large"
        RTMODEL "__core", "430X"
        RTMODEL "__data_model", "large"
        RTMODEL "__dlib_file_descriptor", "1"
        RTMODEL "__double_size", "32"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN ?cstart_init_copy20
        EXTERN ?cstart_init_zero20
        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBLIC FMQS
        PUBLIC JGZX
        PUBLIC Key_set
        PUBLIC Lcd_stop_temp
        PUBLIC Little_bear
        PUBLIC TIMER1_A0_IRQ_Handler
        PUBLIC Temp_warn
        PUBLIC Threshold_temp
        PUBLIC UART_RX_IRQ_Handler
        PUBLIC data
        PUBLIC databuf
        PUBLIC fdata
        PUBLIC function_key
        PUBLIC main
        PUBLIC open_mv_data
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:20, SP:20, SR:16, R4L:16, R4H:4, R4:20, R5L:16, R5H:4
          CFI Resource R5:20, R6L:16, R6H:4, R6:20, R7L:16, R7H:4, R7:20, R8L:16
          CFI Resource R8H:4, R8:20, R9L:16, R9H:4, R9:20, R10L:16, R10H:4
          CFI Resource R10:20, R11L:16, R11H:4, R11:20, R12L:16, R12H:4, R12:20
          CFI Resource R13L:16, R13H:4, R13:20, R14L:16, R14H:4, R14:20, R15L:16
          CFI Resource R15H:4, R15:20
          CFI ResourceParts R4 R4H, R4L
          CFI ResourceParts R5 R5H, R5L
          CFI ResourceParts R6 R6H, R6L
          CFI ResourceParts R7 R7H, R7L
          CFI ResourceParts R8 R8H, R8L
          CFI ResourceParts R9 R9H, R9L
          CFI ResourceParts R10 R10H, R10L
          CFI ResourceParts R11 R11H, R11L
          CFI ResourceParts R12 R12H, R12L
          CFI ResourceParts R13 R13H, R13L
          CFI ResourceParts R14 R14H, R14L
          CFI ResourceParts R15 R15H, R15L
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC or(load(2, DATA, add(CFA, literal(-2))), lshift(and(load(2, DATA, add(CFA, literal(-4))), 61440), 4))
          CFI SR Frame(CFA, -4)
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L SameValue
          CFI R12H SameValue
          CFI R12 Concat
          CFI R13L SameValue
          CFI R13H SameValue
          CFI R13 Concat
          CFI R14L SameValue
          CFI R14H SameValue
          CFI R14 Concat
          CFI R15L SameValue
          CFI R15H SameValue
          CFI R15 Concat
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L Undefined
          CFI R12H Undefined
          CFI R12 Undefined
          CFI R13L Undefined
          CFI R13H Undefined
          CFI R13 Undefined
          CFI R14L Undefined
          CFI R14H Undefined
          CFI R14 Undefined
          CFI R15L Undefined
          CFI R15H Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon1
        
        EXTERN GPIO_MultiBits_Init
        EXTERN LED_Init
        EXTERN LCD_Init
        EXTERN BACK_COLOR
        EXTERN LCD_Clear
        EXTERN Set_Vector_Handler
        EXTERN TIMER_Interval_Us
        EXTERN TIMER_ITConfig
        EXTERN I2C_MasterInit
        EXTERN UART_Init
        EXTERN UART_ITConfig
        EXTERN GPIO_SetBits
        EXTERN logxx
        EXTERN LCD_Show_Picture
        EXTERN LCD_Printf_8x16
        EXTERN LCD_Draw_Circle
        EXTERN LCD_Draw_Dot
        EXTERN LCD_Draw_Line
        EXTERN GPIO_ResetBits
        EXTERN KEY_isPressed
        EXTERN _CmpLt32f
        EXTERN _CmpGe32f
        EXTERN _Add32f
        EXTERN UART_Printf
        EXTERN Mlx90614_Filter
        EXTERN KEY_Init
        EXTERN UART_GetITStatus
        EXTERN UART_GetChar
        EXTERN UART_ClearITPendingBit
        EXTERN GPIO_TurnBit

// G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\User\main.c
//    1 /*******************************************************************************
//    2 *            开发环境 IAR7.2 for msp430f5529
//    3 *            运行平台 msp430f5529
//    4 *-------------------------------------------------------------------------------
//    5 * LMT70               直接使用的ADC 引脚  P6.1                        
//    6 * MLX90614            I2C0:  SDA      SCL
//    7 *                            P3.0     P3.1
//    8 *                            P4.1     P4.2
//    9 * OLED                 D0    D1    RES    DC
//   10 *                      P4.3  P4.0  P3.7   P8.2
//   11 * UCA1                 TX    RX
//   12 *                      P44   P45
//   13 *
//   14 * 引脚可根据需求设置
//   15 *-------------------------------------------------------------------------------
//   16 * LMT70数据的采集主要在 LMT70.c 与 LMT70.h 中 
//   17 * MLX90614数据的采集主要在 msp430f5529_i2c.c 末尾处
//   18 * 滤波算法主要在 Filter.c 与 Filter.h 中
//   19 ********************************************************************************/
//   20 
//   21 #include "include.h"
//   22 #include "stdio.h"
//   23 
//   24 //温度阈值
//   25 #define MIN_Temp 30.0
//   26 #define MAX_Temp 46.0
//   27 
//   28 //初始温度阈值

        RSEG DATA20_I:DATA:SORT:NOROOT(1)
        REQUIRE ?cstart_init_copy20
//   29 float Threshold_temp = 32.0;
Threshold_temp:
        DS8 4
        REQUIRE `?<Initializer for Threshold_temp>`
//   30 
//   31 //锁定温度显示数值

        RSEG DATA20_Z:DATA:SORT:NOROOT(1)
        REQUIRE ?cstart_init_zero20
//   32 float Lcd_stop_temp = 0.0;
Lcd_stop_temp:
        DS8 4
//   33 
//   34 //以下参数用于串口接收数据

        RSEG DATA20_Z:DATA:SORT:NOROOT(0)
        REQUIRE ?cstart_init_zero20
//   35 char databuf[256];
databuf:
        DS8 256

        RSEG DATA20_Z:DATA:SORT:NOROOT(1)
        REQUIRE ?cstart_init_zero20
//   36 static int num = 0;
num:
        DS8 2
//   37 
//   38 //勿改 可能引发玄学错误

        RSEG DATA20_I:DATA:SORT:NOROOT(1)
        REQUIRE ?cstart_init_copy20
//   39 uint16_t data=1000;
data:
        DS8 2
        REQUIRE `?<Initializer for data>`

        RSEG DATA20_I:DATA:SORT:NOROOT(1)
        REQUIRE ?cstart_init_copy20
//   40 float fdata=1.0;
fdata:
        DS8 4
        REQUIRE `?<Initializer for fdata>`
//   41 
//   42 //勿改 可能引发玄学错误

        RSEG ISR_CODE:CODE:REORDER:NOROOT(1)
        CALL_GRAPH_ROOT TIMER1_A0_IRQ_Handler, "interrupt"
//   43 __interrupt void TIMER1_A0_IRQ_Handler()
TIMER1_A0_IRQ_Handler:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function TIMER1_A0_IRQ_Handler
//   44 {
        PUSHM.A #0x4, R15
          CFI R12L Frame(CFA, -20)
          CFI R12H Frame(CFA, -18)
          CFI R13L Frame(CFA, -16)
          CFI R13H Frame(CFA, -14)
          CFI R14L Frame(CFA, -12)
          CFI R14H Frame(CFA, -10)
          CFI R15L Frame(CFA, -8)
          CFI R15H Frame(CFA, -6)
          CFI CFA SP+20
//   45    GPIO_TurnBit  (P4, 7);
        MOV.B   #0x7, R13
        MOV.B   #0x3, R12
          CFI FunCall GPIO_TurnBit
        CALLA   #GPIO_TurnBit
//   46    data++;  
        ADDX.W  #0x1, &data
//   47    fdata+=0.1;
        MOV.W   #0xcccd, R14
        MOV.W   #0x3dcc, R15
        MOVX.W  &fdata, R12
        MOVX.W  &fdata + 2, R13
          CFI FunCall _Add32f
        CALLA   #_Add32f
        MOVX.W  R12, &fdata
        MOVX.W  R13, &fdata + 2
//   48 }
        POPM.A  #0x4, R15
          CFI R12H SameValue
          CFI R13H SameValue
          CFI R14H SameValue
          CFI R15H SameValue
          CFI R12L SameValue
          CFI R13L SameValue
          CFI R14L SameValue
          CFI R15L SameValue
          CFI CFA SP+4
        RETI
          CFI EndBlock cfiBlock0
//   49 
//   50 //串口

        RSEG ISR_CODE:CODE:REORDER:NOROOT(1)
        CALL_GRAPH_ROOT UART_RX_IRQ_Handler, "interrupt"
//   51 __interrupt void UART_RX_IRQ_Handler()
UART_RX_IRQ_Handler:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function UART_RX_IRQ_Handler
//   52 { 
        PUSHM.A #0x4, R15
          CFI R12L Frame(CFA, -20)
          CFI R12H Frame(CFA, -18)
          CFI R13L Frame(CFA, -16)
          CFI R13H Frame(CFA, -14)
          CFI R14L Frame(CFA, -12)
          CFI R14H Frame(CFA, -10)
          CFI R15L Frame(CFA, -8)
          CFI R15H Frame(CFA, -6)
          CFI CFA SP+20
//   53   if(UART_GetITStatus(UART1,UART_RX_IRQn) == TRUE)   //清除串口某一个中断标志
        MOV.B   #0x1, R13
        MOV.B   #0x1, R12
          CFI FunCall UART_GetITStatus
        CALLA   #UART_GetITStatus
        CMP.B   #0x1, R12
        JNE     ??UART_RX_IRQ_Handler_0
//   54   {
//   55     //传输速率高时，接收中断里不要做其他事件，否则会丢失数据，另外主时钟也要设高一点
//   56     databuf[num]=UART_GetChar     (UART1);                 //读取一个字节1个字节
        MOV.B   #0x1, R12
          CFI FunCall UART_GetChar
        CALLA   #UART_GetChar
        MOVX.W  &num, R15
        MOVX.B  R12, databuf(R15)
//   57     num++;
        ADDX.W  #0x1, &num
//   58     UART_ClearITPendingBit(UART1,UART_RX_IRQn);    //清除串口某一个中断标志
        MOV.B   #0x1, R13
        MOV.B   #0x1, R12
          CFI FunCall UART_ClearITPendingBit
        CALLA   #UART_ClearITPendingBit
//   59   }
//   60 }
??UART_RX_IRQ_Handler_0:
        POPM.A  #0x4, R15
          CFI R12H SameValue
          CFI R13H SameValue
          CFI R14H SameValue
          CFI R15H SameValue
          CFI R12L SameValue
          CFI R13L SameValue
          CFI R14L SameValue
          CFI R15L SameValue
          CFI CFA SP+4
        RETI
          CFI EndBlock cfiBlock1
//   61 
//   62 //功能按键初始化

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   63 void function_key()
function_key:
          CFI Block cfiBlock2 Using cfiCommon1
          CFI Function function_key
//   64 {
//   65   KEY_Init(KEY1,NULL); 	                //按键初始化函数 P2.1  Threshold_temp ++
        MOVA    #0x0, R13
        MOV.B   #0x0, R12
          CFI FunCall KEY_Init
        CALLA   #KEY_Init
//   66   KEY_Init(KEY2,NULL); 	                //按键初始化函数 P1.1  Threshold_temp --
        MOVA    #0x0, R13
        MOV.B   #0x1, R12
          CFI FunCall KEY_Init
        CALLA   #KEY_Init
//   67   KEY_Init(KEY3,NULL); 	                //按键初始化函数 P8.1  串口通信 字符串1 识别人脸
        MOVA    #0x0, R13
        MOV.B   #0x2, R12
          CFI FunCall KEY_Init
        CALLA   #KEY_Init
//   68   KEY_Init(KEY4,NULL); 	                //按键初始化函数 P6.2  KEY4 串口通信 字符串2 学习人脸
        MOVA    #0x0, R13
        MOV.B   #0x3, R12
          CFI FunCall KEY_Init
        CALLA   #KEY_Init
//   69   KEY_Init(KEY5,NULL); 	                //按键初始化函数 P6.3
        MOVA    #0x0, R13
        MOV.B   #0x4, R12
          CFI FunCall KEY_Init
        BRA     #KEY_Init
          CFI EndBlock cfiBlock2
//   70   //KEY_Init(KEY6,NULL); 	                //按键初始化函数 P6.4
//   71 }
//   72 
//   73 //温度报警

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   74 void Temp_warn()
Temp_warn:
          CFI Block cfiBlock3 Using cfiCommon1
          CFI Function Temp_warn
//   75 {
//   76   if(Mlx90614_Filter() > Threshold_temp)
          CFI FunCall Mlx90614_Filter
        CALLA   #Mlx90614_Filter
        MOV.W   R12, R14
        MOV.W   R13, R15
        MOVX.W  &Threshold_temp, R12
        MOVX.W  &Threshold_temp + 2, R13
          CFI FunCall _CmpLt32f
        CALLA   #_CmpLt32f
        CMP.W   #0x0, R12
        JEQ     ??Temp_warn_0
//   77   {
//   78     GPIO_ResetBits  (PORT6, GPIO_Pin_0);     //输出高电平 蜂鸣器响
        MOV.W   #0x1, R13
        MOV.B   #0x5, R12
          CFI FunCall GPIO_ResetBits
        CALLA   #GPIO_ResetBits
//   79   }
//   80   if(Mlx90614_Filter() <= Threshold_temp)
??Temp_warn_0:
          CFI FunCall Mlx90614_Filter
        CALLA   #Mlx90614_Filter
        MOV.W   R12, R14
        MOV.W   R13, R15
        MOVX.W  &Threshold_temp, R12
        MOVX.W  &Threshold_temp + 2, R13
          CFI FunCall _CmpGe32f
        CALLA   #_CmpGe32f
        CMP.W   #0x0, R12
        JEQ     ??Temp_warn_1
//   81   {
//   82     GPIO_SetBits(PORT6, GPIO_Pin_0);         //输出低电平 蜂鸣器不响
        MOV.W   #0x1, R13
        MOV.B   #0x5, R12
          CFI FunCall GPIO_SetBits
        CALLA   #GPIO_SetBits
//   83   }
//   84 }
??Temp_warn_1:
        RETA
          CFI EndBlock cfiBlock3
//   85 
//   86 //激光准星

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   87 void JGZX()
JGZX:
          CFI Block cfiBlock4 Using cfiCommon1
          CFI Function JGZX
//   88 {
//   89   GPIO_ResetBits  (PORT7, GPIO_Pin_0);
        MOV.W   #0x1, R13
        MOV.B   #0x6, R12
          CFI FunCall GPIO_ResetBits
        CALLA   #GPIO_ResetBits
//   90   DELAY_MS(400);
        ////////////// Start of 10000000 cycles delay.
        MOV.W   #0x259e, R15
        MOV.W   #0x26, R14
??JGZX_0:
        ADD.W   #0xffff, R15
        ADDC.W  #0xffff, R14
        JC      ??JGZX_0
        ////////////// End of delay code.
//   91   GPIO_SetBits(PORT7, GPIO_Pin_0);
        MOV.W   #0x1, R13
        MOV.B   #0x6, R12
          CFI FunCall GPIO_SetBits
        BRA     #GPIO_SetBits
          CFI EndBlock cfiBlock4
//   92 }
//   93 
//   94 //按键操作

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   95 void Key_set()
Key_set:
          CFI Block cfiBlock5 Using cfiCommon1
          CFI Function Key_set
//   96 {
//   97   //KEY1增加阈值 Threshold_temp
//   98      if(KEY_isPressed(KEY1) && (Threshold_temp < MAX_Temp) && (Threshold_temp >= MIN_Temp))
        MOV.B   #0x0, R12
          CFI FunCall KEY_isPressed
        CALLA   #KEY_isPressed
        CMP.B   #0x0, R12
        JEQ     ??Key_set_0
        MOV.W   #0x0, R14
        MOV.W   #0x4238, R15
        MOVX.W  &Threshold_temp, R12
        MOVX.W  &Threshold_temp + 2, R13
          CFI FunCall _CmpLt32f
        CALLA   #_CmpLt32f
        CMP.W   #0x0, R12
        JEQ     ??Key_set_0
        MOV.W   #0x0, R14
        MOV.W   #0x41f0, R15
        MOVX.W  &Threshold_temp, R12
        MOVX.W  &Threshold_temp + 2, R13
          CFI FunCall _CmpGe32f
        CALLA   #_CmpGe32f
        CMP.W   #0x0, R12
        JEQ     ??Key_set_0
//   99     {
//  100       Threshold_temp ++;
        MOV.W   #0x0, R14
        MOV.W   #0x3f80, R15
        MOVX.W  &Threshold_temp, R12
        MOVX.W  &Threshold_temp + 2, R13
          CFI FunCall _Add32f
        CALLA   #_Add32f
        MOVX.W  R12, &Threshold_temp
        MOVX.W  R13, &Threshold_temp + 2
//  101     }
//  102     //KEY2减小阈值 Threshold_temp
//  103     if(KEY_isPressed(KEY2) && (Threshold_temp <= MAX_Temp) && (Threshold_temp > MIN_Temp))
??Key_set_0:
        MOV.B   #0x1, R12
          CFI FunCall KEY_isPressed
        CALLA   #KEY_isPressed
        CMP.B   #0x0, R12
        JEQ     ??Key_set_1
        MOV.W   #0x1, R14
        MOV.W   #0x4238, R15
        MOVX.W  &Threshold_temp, R12
        MOVX.W  &Threshold_temp + 2, R13
          CFI FunCall _CmpLt32f
        CALLA   #_CmpLt32f
        CMP.W   #0x0, R12
        JEQ     ??Key_set_1
        MOV.W   #0x1, R14
        MOV.W   #0x41f0, R15
        MOVX.W  &Threshold_temp, R12
        MOVX.W  &Threshold_temp + 2, R13
          CFI FunCall _CmpGe32f
        CALLA   #_CmpGe32f
        CMP.W   #0x0, R12
        JEQ     ??Key_set_1
//  104     {
//  105       Threshold_temp --;
        MOV.W   #0x0, R14
        MOV.W   #0xbf80, R15
        MOVX.W  &Threshold_temp, R12
        MOVX.W  &Threshold_temp + 2, R13
          CFI FunCall _Add32f
        CALLA   #_Add32f
        MOVX.W  R12, &Threshold_temp
        MOVX.W  R13, &Threshold_temp + 2
//  106     }
//  107     //KEY3 串口通信 字符串1 识别人脸
//  108     if(KEY_isPressed(KEY3))
??Key_set_1:
        MOV.B   #0x2, R12
          CFI FunCall KEY_isPressed
        CALLA   #KEY_isPressed
        CMP.B   #0x0, R12
        JEQ     ??Key_set_2
//  109     {
//  110       UART_Printf   (UART1,"1");
        MOVA    #`?<Constant "1">`, R13
        MOV.B   #0x1, R12
          CFI FunCall UART_Printf
        CALLA   #UART_Printf
//  111       LCD_Printf_8x16(0,55,"Judge Face&Mask!");
        MOVA    #`?<Constant "Judge Face&Mask!">`, R14
        MOV.W   #0x37, R13
        MOV.W   #0x0, R12
          CFI FunCall LCD_Printf_8x16
        CALLA   #LCD_Printf_8x16
//  112       //OLED_PrintfAt(FONT_ASCII_8X16,6,0,"Judge Face&Mask!");
//  113       
//  114     }
//  115     //KEY4 串口通信 字符串2 学习人脸
//  116     if(KEY_isPressed(KEY4))
??Key_set_2:
        MOV.B   #0x3, R12
          CFI FunCall KEY_isPressed
        CALLA   #KEY_isPressed
        CMP.B   #0x0, R12
        JEQ     ??Key_set_3
//  117     {
//  118      UART_Printf   (UART1,"2");
        MOVA    #`?<Constant "2">`, R13
        MOV.B   #0x1, R12
          CFI FunCall UART_Printf
        CALLA   #UART_Printf
//  119      LCD_Printf_8x16(0,55,"Learning Faces!  ");
        MOVA    #`?<Constant "Learning Faces!  ">`, R14
        MOV.W   #0x37, R13
        MOV.W   #0x0, R12
          CFI FunCall LCD_Printf_8x16
        CALLA   #LCD_Printf_8x16
//  120      //OLED_PrintfAt(FONT_ASCII_8X16,6,0,"Learning Faces!  ");
//  121     }
//  122     /********************************************
//  123     //KEY5 串口通信 字符串3 判断是否戴口罩
//  124     if(KEY_isPressed(KEY5))
//  125     {
//  126      UART_Printf   (UART1,"3");
//  127      OLED_PrintfAt(FONT_ASCII_8X16,6,0,"Judge Mask!      ");
//  128     }
//  129     ********************************************/
//  130     //KEY5 按下后锁定显示
//  131     if(KEY_isPressed(KEY5))
??Key_set_3:
        MOV.B   #0x4, R12
          CFI FunCall KEY_isPressed
        CALLA   #KEY_isPressed
        CMP.B   #0x0, R12
        JEQ     ??Key_set_4
//  132     {
//  133       Lcd_stop_temp = Mlx90614_Filter();
          CFI FunCall Mlx90614_Filter
        CALLA   #Mlx90614_Filter
        MOVX.W  R12, &Lcd_stop_temp
        MOVX.W  R13, &Lcd_stop_temp + 2
//  134       LCD_Printf_8x16(0,87,"Temp: %.1f C",Lcd_stop_temp);       //显示MLX90614温度数据
        PUSHX.W &Lcd_stop_temp + 2
          CFI CFA SP+6
        PUSHX.W &Lcd_stop_temp
          CFI CFA SP+8
        MOVA    #`?<Constant "Temp: %.1f C">`, R14
        MOV.W   #0x57, R13
        MOV.W   #0x0, R12
          CFI FunCall LCD_Printf_8x16
        CALLA   #LCD_Printf_8x16
//  135       JGZX();
          CFI FunCall JGZX
        CALLA   #JGZX
        ADD.W   #0x4, SP
          CFI CFA SP+4
//  136       //OLED_DispChineseAt(FONT_CHINESE_16X16,2,0,"温度");          //39
//  137       //OLED_PrintfAt(FONT_ASCII_8X16,2,32,":%.1f",Oled_stop_temp);//显示MLX90614温度数据
//  138       //OLED_DispChineseAt(FONT_CHINESE_16X16,2,72,"℃");
//  139     }
//  140 }
??Key_set_4:
        RETA
          CFI EndBlock cfiBlock5
//  141 
//  142 //蜂鸣器响一下

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  143 void FMQS()
FMQS:
          CFI Block cfiBlock6 Using cfiCommon1
          CFI Function FMQS
//  144 {
//  145   //蜂鸣器
//  146   GPIO_ResetBits  (PORT6, GPIO_Pin_0);     //输出高电平 蜂鸣器响
        MOV.W   #0x1, R13
        MOV.B   #0x5, R12
          CFI FunCall GPIO_ResetBits
        CALLA   #GPIO_ResetBits
//  147   DELAY_MS(200);
        ////////////// Start of 5000000 cycles delay.
        MOV.W   #0x12ce, R15
        MOV.W   #0x13, R14
??FMQS_0:
        ADD.W   #0xffff, R15
        ADDC.W  #0xffff, R14
        JC      ??FMQS_0
        ////////////// End of delay code.
//  148   GPIO_SetBits(PORT6, GPIO_Pin_0);         //输出低电平 蜂鸣器不响
        MOV.W   #0x1, R13
        MOV.B   #0x5, R12
          CFI FunCall GPIO_SetBits
        BRA     #GPIO_SetBits
          CFI EndBlock cfiBlock6
//  149 }
//  150 
//  151 //串口接收open mv数据

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  152 void open_mv_data()
open_mv_data:
          CFI Block cfiBlock7 Using cfiCommon1
          CFI Function open_mv_data
//  153 {
//  154   //戴口罩    databuf[0] = '6'
//  155   //不戴口罩  databuf[0] = '5'
//  156   //UART_Printf   (UART1," Hello-CTGU!\n UART-TEST!\n");  //串口发送数据
//  157   if(num > 0)
        CMPX.W  #0x1, &num
        JL      ??open_mv_data_1
//  158   {
//  159     //OLED_PrintfAt(FONT_ASCII_8X16,0,0,"%s",databuf);    //将串口接收的数据显示出来 注意接收与显示的数据均是字符串均是字符串
//  160     if(databuf[0] == '5')
        CMPX.B  #0x35, &databuf
        JNE     ??open_mv_data_2
//  161     {
//  162       LCD_Printf_8x16(0,103,"NO MASK!!!      ");
        MOVA    #`?<Constant "NO MASK!!!      ">`, R14
        MOV.W   #0x67, R13
        MOV.W   #0x0, R12
          CFI FunCall LCD_Printf_8x16
        CALLA   #LCD_Printf_8x16
//  163     }
//  164     if(databuf[0] == '6')
??open_mv_data_2:
        CMPX.B  #0x36, &databuf
        JNE     ??open_mv_data_3
//  165     {
//  166       LCD_Printf_8x16(0,103,"MASK YES        ");
        MOVA    #`?<Constant "MASK YES        ">`, R14
        MOV.W   #0x67, R13
        MOV.W   #0x0, R12
          CFI FunCall LCD_Printf_8x16
        CALLA   #LCD_Printf_8x16
//  167     }
//  168     if(databuf[0] == '-')
??open_mv_data_3:
        CMPX.B  #0x2d, &databuf
        JNE     ??open_mv_data_4
//  169     {
//  170       LCD_Printf_8x16(0,103,"%s",databuf);      ////将串口接收的数据显示出来 注意接收与显示的数据
        PUSHX.A #databuf
          CFI CFA SP+8
        MOVA    #`?<Constant "%s">`, R14
        MOV.W   #0x67, R13
        MOV.W   #0x0, R12
          CFI FunCall LCD_Printf_8x16
        CALLA   #LCD_Printf_8x16
//  171       GPIO_ResetBits  (PORT6, GPIO_Pin_0);     //输出高电平 蜂鸣器响
        MOV.W   #0x1, R13
        MOV.B   #0x5, R12
          CFI FunCall GPIO_ResetBits
        CALLA   #GPIO_ResetBits
//  172       DELAY_MS(6000);
        ////////////// Start of 150000000 cycles delay.
        MOV.W   #0x345e, R15
        MOV.W   #0x23c, R14
??open_mv_data_8:
        ADD.W   #0xffff, R15
        ADDC.W  #0xffff, R14
        JC      ??open_mv_data_8
        ////////////// End of delay code.
//  173       GPIO_SetBits(PORT6, GPIO_Pin_0);         //输出低电平 蜂鸣器不响
        MOV.W   #0x1, R13
        MOV.B   #0x5, R12
          CFI FunCall GPIO_SetBits
        CALLA   #GPIO_SetBits
        ADD.W   #0x4, SP
          CFI CFA SP+4
//  174     }
//  175     if(databuf[0] == 'P' || databuf[0] == 'S' || databuf[0] == 'N')
??open_mv_data_4:
        CMPX.B  #0x50, &databuf
        JEQ     ??open_mv_data_5
        CMPX.B  #0x53, &databuf
        JEQ     ??open_mv_data_5
        CMPX.B  #0x4e, &databuf
        JNE     ??open_mv_data_6
//  176     {
//  177       FMQS();
??open_mv_data_5:
          CFI FunCall FMQS
        CALLA   #FMQS
//  178       LCD_Printf_8x16(0,103,"%s",databuf);      ////将串口接收的数据显示出来 注意接收与显示的数据
        PUSHX.A #databuf
          CFI CFA SP+8
        MOVA    #`?<Constant "%s">`, R14
        MOV.W   #0x67, R13
        MOV.W   #0x0, R12
          CFI FunCall LCD_Printf_8x16
        CALLA   #LCD_Printf_8x16
//  179       DELAY_MS(5000);
        ////////////// Start of 125000000 cycles delay.
        MOV.W   #0xd64e, R15
        MOV.W   #0x1dc, R14
??open_mv_data_9:
        ADD.W   #0xffff, R15
        ADDC.W  #0xffff, R14
        JC      ??open_mv_data_9
        ////////////// End of delay code.
        ADD.W   #0x4, SP
          CFI CFA SP+4
//  180     }
//  181     for(int i=0;i < num;i++)
??open_mv_data_6:
        MOV.W   #0x0, R15
??open_mv_data_0:
        CMPX.W  &num, R15
        JGE     ??open_mv_data_7
//  182     {
//  183       databuf[i] = 0;
        MOV.W   R15, R14
        MOVX.B  #0x0, databuf(R14)
//  184     }
        ADD.W   #0x1, R15
        JMP     ??open_mv_data_0
//  185     num = 0;
??open_mv_data_7:
        MOVX.W  #0x0, &num
//  186   }
//  187 }
??open_mv_data_1:
        RETA
          CFI EndBlock cfiBlock7
//  188 
//  189 //绘制小熊

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  190 void Little_bear()
Little_bear:
          CFI Block cfiBlock8 Using cfiCommon1
          CFI Function Little_bear
//  191 {
//  192   LCD_Draw_Circle(44,47,5,WHITE);           //耳朵
        MOV.W   #0xffff, R15
        MOV.W   #0x5, R14
        MOV.W   #0x2f, R13
        MOV.W   #0x2c, R12
          CFI FunCall LCD_Draw_Circle
        CALLA   #LCD_Draw_Circle
//  193   LCD_Draw_Circle(84,47,5,WHITE);           //耳朵
        MOV.W   #0xffff, R15
        MOV.W   #0x5, R14
        MOV.W   #0x2f, R13
        MOV.W   #0x54, R12
          CFI FunCall LCD_Draw_Circle
        CALLA   #LCD_Draw_Circle
//  194   LCD_Draw_Circle(64,26,20,WHITE);          //脸
        MOV.W   #0xffff, R15
        MOV.W   #0x14, R14
        MOV.W   #0x1a, R13
        MOV.W   #0x40, R12
          CFI FunCall LCD_Draw_Circle
        CALLA   #LCD_Draw_Circle
//  195   //LCD_Draw_Circle(64,28,18,WHITE);          //画圆
//  196   LCD_Draw_Dot(54,32,WHITE);
        MOV.W   #0xffff, R14
        MOV.W   #0x20, R13
        MOV.W   #0x36, R12
          CFI FunCall LCD_Draw_Dot
        CALLA   #LCD_Draw_Dot
//  197   LCD_Draw_Dot(55,32,WHITE);
        MOV.W   #0xffff, R14
        MOV.W   #0x20, R13
        MOV.W   #0x37, R12
          CFI FunCall LCD_Draw_Dot
        CALLA   #LCD_Draw_Dot
//  198   LCD_Draw_Dot(56,32,WHITE);
        MOV.W   #0xffff, R14
        MOV.W   #0x20, R13
        MOV.W   #0x38, R12
          CFI FunCall LCD_Draw_Dot
        CALLA   #LCD_Draw_Dot
//  199   LCD_Draw_Dot(53,32,WHITE);
        MOV.W   #0xffff, R14
        MOV.W   #0x20, R13
        MOV.W   #0x35, R12
          CFI FunCall LCD_Draw_Dot
        CALLA   #LCD_Draw_Dot
//  200   LCD_Draw_Dot(52,32,WHITE);
        MOV.W   #0xffff, R14
        MOV.W   #0x20, R13
        MOV.W   #0x34, R12
          CFI FunCall LCD_Draw_Dot
        CALLA   #LCD_Draw_Dot
//  201   
//  202   LCD_Draw_Dot(54,31,WHITE);
        MOV.W   #0xffff, R14
        MOV.W   #0x1f, R13
        MOV.W   #0x36, R12
          CFI FunCall LCD_Draw_Dot
        CALLA   #LCD_Draw_Dot
//  203   LCD_Draw_Dot(55,31,WHITE);
        MOV.W   #0xffff, R14
        MOV.W   #0x1f, R13
        MOV.W   #0x37, R12
          CFI FunCall LCD_Draw_Dot
        CALLA   #LCD_Draw_Dot
//  204   LCD_Draw_Dot(56,31,WHITE);
        MOV.W   #0xffff, R14
        MOV.W   #0x1f, R13
        MOV.W   #0x38, R12
          CFI FunCall LCD_Draw_Dot
        CALLA   #LCD_Draw_Dot
//  205   LCD_Draw_Dot(53,31,WHITE);
        MOV.W   #0xffff, R14
        MOV.W   #0x1f, R13
        MOV.W   #0x35, R12
          CFI FunCall LCD_Draw_Dot
        CALLA   #LCD_Draw_Dot
//  206   LCD_Draw_Dot(52,31,WHITE);
        MOV.W   #0xffff, R14
        MOV.W   #0x1f, R13
        MOV.W   #0x34, R12
          CFI FunCall LCD_Draw_Dot
        CALLA   #LCD_Draw_Dot
//  207   
//  208   LCD_Draw_Dot(74,32,WHITE);
        MOV.W   #0xffff, R14
        MOV.W   #0x20, R13
        MOV.W   #0x4a, R12
          CFI FunCall LCD_Draw_Dot
        CALLA   #LCD_Draw_Dot
//  209   LCD_Draw_Dot(73,32,WHITE);
        MOV.W   #0xffff, R14
        MOV.W   #0x20, R13
        MOV.W   #0x49, R12
          CFI FunCall LCD_Draw_Dot
        CALLA   #LCD_Draw_Dot
//  210   LCD_Draw_Dot(72,32,WHITE);
        MOV.W   #0xffff, R14
        MOV.W   #0x20, R13
        MOV.W   #0x48, R12
          CFI FunCall LCD_Draw_Dot
        CALLA   #LCD_Draw_Dot
//  211   LCD_Draw_Dot(71,32,WHITE);
        MOV.W   #0xffff, R14
        MOV.W   #0x20, R13
        MOV.W   #0x47, R12
          CFI FunCall LCD_Draw_Dot
        CALLA   #LCD_Draw_Dot
//  212   LCD_Draw_Dot(70,32,WHITE);
        MOV.W   #0xffff, R14
        MOV.W   #0x20, R13
        MOV.W   #0x46, R12
          CFI FunCall LCD_Draw_Dot
        CALLA   #LCD_Draw_Dot
//  213   
//  214   LCD_Draw_Dot(74,31,WHITE);
        MOV.W   #0xffff, R14
        MOV.W   #0x1f, R13
        MOV.W   #0x4a, R12
          CFI FunCall LCD_Draw_Dot
        CALLA   #LCD_Draw_Dot
//  215   LCD_Draw_Dot(73,31,WHITE);
        MOV.W   #0xffff, R14
        MOV.W   #0x1f, R13
        MOV.W   #0x49, R12
          CFI FunCall LCD_Draw_Dot
        CALLA   #LCD_Draw_Dot
//  216   LCD_Draw_Dot(72,31,WHITE);
        MOV.W   #0xffff, R14
        MOV.W   #0x1f, R13
        MOV.W   #0x48, R12
          CFI FunCall LCD_Draw_Dot
        CALLA   #LCD_Draw_Dot
//  217   LCD_Draw_Dot(71,31,WHITE);
        MOV.W   #0xffff, R14
        MOV.W   #0x1f, R13
        MOV.W   #0x47, R12
          CFI FunCall LCD_Draw_Dot
        CALLA   #LCD_Draw_Dot
//  218   LCD_Draw_Dot(70,31,WHITE);
        MOV.W   #0xffff, R14
        MOV.W   #0x1f, R13
        MOV.W   #0x46, R12
          CFI FunCall LCD_Draw_Dot
        CALLA   #LCD_Draw_Dot
//  219   
//  220   LCD_Draw_Line(93,28,93,40,WHITE);         //惊叹号
        PUSH.W  #0xffff
          CFI CFA SP+6
        MOV.W   #0x28, R15
        MOV.W   #0x5d, R14
        MOV.W   #0x1c, R13
        MOV.W   #0x5d, R12
          CFI FunCall LCD_Draw_Line
        CALLA   #LCD_Draw_Line
//  221   LCD_Draw_Line(94,28,94,40,WHITE);
        PUSH.W  #0xffff
          CFI CFA SP+8
        MOV.W   #0x28, R15
        MOV.W   #0x5e, R14
        MOV.W   #0x1c, R13
        MOV.W   #0x5e, R12
          CFI FunCall LCD_Draw_Line
        CALLA   #LCD_Draw_Line
//  222   LCD_Draw_Dot(93,20,WHITE);
        MOV.W   #0xffff, R14
        MOV.W   #0x14, R13
        MOV.W   #0x5d, R12
          CFI FunCall LCD_Draw_Dot
        CALLA   #LCD_Draw_Dot
//  223   LCD_Draw_Dot(93,21,WHITE);
        MOV.W   #0xffff, R14
        MOV.W   #0x15, R13
        MOV.W   #0x5d, R12
          CFI FunCall LCD_Draw_Dot
        CALLA   #LCD_Draw_Dot
//  224   LCD_Draw_Dot(94,20,WHITE);
        MOV.W   #0xffff, R14
        MOV.W   #0x14, R13
        MOV.W   #0x5e, R12
          CFI FunCall LCD_Draw_Dot
        CALLA   #LCD_Draw_Dot
//  225   LCD_Draw_Dot(94,21,WHITE);
        MOV.W   #0xffff, R14
        MOV.W   #0x15, R13
        MOV.W   #0x5e, R12
          CFI FunCall LCD_Draw_Dot
        CALLA   #LCD_Draw_Dot
//  226   
//  227   LCD_Draw_Line(102,28,102,40,WHITE);
        PUSH.W  #0xffff
          CFI CFA SP+10
        MOV.W   #0x28, R15
        MOV.W   #0x66, R14
        MOV.W   #0x1c, R13
        MOV.W   #0x66, R12
          CFI FunCall LCD_Draw_Line
        CALLA   #LCD_Draw_Line
//  228   LCD_Draw_Line(103,28,103,40,WHITE);
        PUSH.W  #0xffff
          CFI CFA SP+12
        MOV.W   #0x28, R15
        MOV.W   #0x67, R14
        MOV.W   #0x1c, R13
        MOV.W   #0x67, R12
          CFI FunCall LCD_Draw_Line
        CALLA   #LCD_Draw_Line
//  229   LCD_Draw_Dot(102,20,WHITE);
        MOV.W   #0xffff, R14
        MOV.W   #0x14, R13
        MOV.W   #0x66, R12
          CFI FunCall LCD_Draw_Dot
        CALLA   #LCD_Draw_Dot
//  230   LCD_Draw_Dot(102,21,WHITE);
        MOV.W   #0xffff, R14
        MOV.W   #0x15, R13
        MOV.W   #0x66, R12
          CFI FunCall LCD_Draw_Dot
        CALLA   #LCD_Draw_Dot
//  231   LCD_Draw_Dot(103,20,WHITE);
        MOV.W   #0xffff, R14
        MOV.W   #0x14, R13
        MOV.W   #0x67, R12
          CFI FunCall LCD_Draw_Dot
        CALLA   #LCD_Draw_Dot
//  232   LCD_Draw_Dot(103,21,WHITE);
        MOV.W   #0xffff, R14
        MOV.W   #0x15, R13
        MOV.W   #0x67, R12
          CFI FunCall LCD_Draw_Dot
        CALLA   #LCD_Draw_Dot
//  233 
//  234   LCD_Draw_Line(111,28,111,40,WHITE);
        PUSH.W  #0xffff
          CFI CFA SP+14
        MOV.W   #0x28, R15
        MOV.W   #0x6f, R14
        MOV.W   #0x1c, R13
        MOV.W   #0x6f, R12
          CFI FunCall LCD_Draw_Line
        CALLA   #LCD_Draw_Line
//  235   LCD_Draw_Line(112,28,112,40,WHITE);
        PUSH.W  #0xffff
          CFI CFA SP+16
        MOV.W   #0x28, R15
        MOV.W   #0x70, R14
        MOV.W   #0x1c, R13
        MOV.W   #0x70, R12
          CFI FunCall LCD_Draw_Line
        CALLA   #LCD_Draw_Line
//  236   LCD_Draw_Dot(111,20,WHITE);
        MOV.W   #0xffff, R14
        MOV.W   #0x14, R13
        MOV.W   #0x6f, R12
          CFI FunCall LCD_Draw_Dot
        CALLA   #LCD_Draw_Dot
//  237   LCD_Draw_Dot(111,21,WHITE);
        MOV.W   #0xffff, R14
        MOV.W   #0x15, R13
        MOV.W   #0x6f, R12
          CFI FunCall LCD_Draw_Dot
        CALLA   #LCD_Draw_Dot
//  238   LCD_Draw_Dot(112,20,WHITE);
        MOV.W   #0xffff, R14
        MOV.W   #0x14, R13
        MOV.W   #0x70, R12
          CFI FunCall LCD_Draw_Dot
        CALLA   #LCD_Draw_Dot
//  239   LCD_Draw_Dot(112,21,WHITE);
        MOV.W   #0xffff, R14
        MOV.W   #0x15, R13
        MOV.W   #0x70, R12
          CFI FunCall LCD_Draw_Dot
        CALLA   #LCD_Draw_Dot
//  240   
//  241   LCD_Draw_Line(60,16,68,16,WHITE);         //嘴巴
        PUSH.W  #0xffff
          CFI CFA SP+18
        MOV.W   #0x10, R15
        MOV.W   #0x44, R14
        MOV.W   #0x10, R13
        MOV.W   #0x3c, R12
          CFI FunCall LCD_Draw_Line
        CALLA   #LCD_Draw_Line
//  242 }
        ADD.W   #0xe, SP
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock8
//  243 
//  244 //主程序

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  245 void main()
main:
          CFI Block cfiBlock9 Using cfiCommon1
          CFI Function main
//  246 {
//  247   DisableInterrupts();            //禁止总中断
        DINT
        NOP
//  248   SMCLK_OUT();
        MOV.W   #0x102, R14
        MOV.W   #0x4, R13
        MOV.B   #0x1, R12
          CFI FunCall GPIO_MultiBits_Init
        CALLA   #GPIO_MultiBits_Init
//  249   LED_Init(LED_ALL);              //LED灯初始化
        MOV.B   #0x2, R12
          CFI FunCall LED_Init
        CALLA   #LED_Init
//  250   LCD_INIT();                     //LCD初始化   128 160
          CFI FunCall LCD_Init
        CALLA   #LCD_Init
        MOVX.W  &BACK_COLOR, R12
          CFI FunCall LCD_Clear
        CALLA   #LCD_Clear
//  251   //OLED_Init();                  //OLED初始化
//  252   
//  253   Set_Vector_Handler(VECTOR_TIMER_A1_CCR0, TIMER1_A0_IRQ_Handler);    //设置定时器TA1的中断服务程序为：TIMER1_A0_IRQ_Handler
        MOVA    #TIMER1_A0_IRQ_Handler, R13
        MOV.B   #0x31, R12
          CFI FunCall Set_Vector_Handler
        CALLA   #Set_Vector_Handler
//  254   TIMER_Interval_Ms(TIMER_A1, 500);                                   //设置TA1为定时中断，中断时间为500Ms
        MOV.W   #0xa120, R14
        MOV.W   #0x7, R15
        MOV.B   #0x1, R12
          CFI FunCall TIMER_Interval_Us
        CALLA   #TIMER_Interval_Us
//  255   TIMER_ITConfig (TIMER_A1, TIMER_CCR0_IRQn, ENABLE);                 //使能TIMER的某一个中断
        MOV.B   #0x1, R14
        MOV.B   #0x0, R13
        MOV.B   #0x1, R12
          CFI FunCall TIMER_ITConfig
        CALLA   #TIMER_ITConfig
//  256   
//  257   //以下为用户需求部分初始化
//  258   
//  259   //ADC_Init(ADC_CH1,ADC_VREF_2_5V,ADC_12bit);       //初始化ADC通道,P6.1
//  260   I2C_MasterInit   (I2C0, 0x00,50000);            //初始化I2C0模块为主机
        MOV.W   #0xc350, R14
        MOV.W   #0x0, R15
        MOV.W   #0x0, R13
        MOV.B   #0x2, R12
          CFI FunCall I2C_MasterInit
        CALLA   #I2C_MasterInit
//  261   UART_Init        (UART1,115200);                              //初始化UART1模块,波特率115200，波特率高时最好把主时钟 设高些
        MOV.W   #0xc200, R14
        MOV.W   #0x1, R15
        MOV.B   #0x1, R12
          CFI FunCall UART_Init
        CALLA   #UART_Init
//  262   Set_Vector_Handler(VECTOR_UART1,UART_RX_IRQ_Handler);         //设置接收中断向量
        MOVA    #UART_RX_IRQ_Handler, R13
        MOV.B   #0x2e, R12
          CFI FunCall Set_Vector_Handler
        CALLA   #Set_Vector_Handler
//  263   UART_ITConfig  (UART1,UART_RX_IRQn,TRUE);                     //开串口接收中断
        MOV.B   #0x1, R14
        MOV.B   #0x1, R13
        MOV.B   #0x1, R12
          CFI FunCall UART_ITConfig
        CALLA   #UART_ITConfig
//  264   function_key();                               //功能按键初始化
          CFI FunCall function_key
        CALLA   #function_key
//  265   GPIO_MultiBits_Init(P6,BIT0,GPO);             //蜂鸣器 P6.0
        MOV.W   #0x2, R14
        MOV.W   #0x1, R13
        MOV.B   #0x5, R12
          CFI FunCall GPIO_MultiBits_Init
        CALLA   #GPIO_MultiBits_Init
//  266   GPIO_MultiBits_Init(P7,BIT0,GPO);             //激光准星
        MOV.W   #0x2, R14
        MOV.W   #0x1, R13
        MOV.B   #0x6, R12
          CFI FunCall GPIO_MultiBits_Init
        CALLA   #GPIO_MultiBits_Init
//  267   GPIO_SetBits(PORT7, GPIO_Pin_0);
        MOV.W   #0x1, R13
        MOV.B   #0x6, R12
          CFI FunCall GPIO_SetBits
        CALLA   #GPIO_SetBits
//  268   //GPIO_ResetBits  (PORT6, GPIO_Pin_0);        //输出高电平 蜂鸣器响
//  269   GPIO_SetBits(PORT6, GPIO_Pin_0);              //输出低电平 蜂鸣器不响
        MOV.W   #0x1, R13
        MOV.B   #0x5, R12
          CFI FunCall GPIO_SetBits
        CALLA   #GPIO_SetBits
//  270   
//  271   Little_bear();         //绘制小熊
          CFI FunCall Little_bear
        CALLA   #Little_bear
//  272   LCD_Show_Picture(34,119,93,159,logxx);    //显示电赛log 127 159
        PUSHX.A #logxx
          CFI CFA SP+8
        MOV.W   #0x9f, R15
        MOV.W   #0x5d, R14
        MOV.W   #0x77, R13
        MOV.W   #0x22, R12
          CFI FunCall LCD_Show_Picture
        CALLA   #LCD_Show_Picture
        NOP
//  273   
//  274   
//  275   EnableInterrupts();
        EINT
        ADD.W   #0x4, SP
          CFI CFA SP+4
//  276   while(1)
//  277   {
//  278      Key_set();           //按键操作
??main_0:
          CFI FunCall Key_set
        CALLA   #Key_set
//  279      Temp_warn();         //温度报警
          CFI FunCall Temp_warn
        CALLA   #Temp_warn
//  280      open_mv_data();      //串口接收open mv数据
          CFI FunCall open_mv_data
        CALLA   #open_mv_data
//  281      //OLED_PrintfAt(FONT_ASCII_6X8,0,0,"LMT70: %.3f C",Lmt70_Filter());       //显示LMT70温度数据
//  282      //OLED_PrintfAt(FONT_ASCII_8X16,2,0,"Temp:%.2f C",Mlx90614_Filter());     //显示MLX90614温度数据
//  283      
//  284      //LCD_Printf_8x16(0,103,"%s",databuf);//显示一个字符串 一行最多16个字符
//  285      //LCD_Printf_8x16(0,103,"People 3 Mask OK");
//  286      
//  287      LCD_Printf_8x16(0,87,"Temp: ");            //温度
        MOVA    #`?<Constant "Temp: ">`, R14
        MOV.W   #0x57, R13
        MOV.W   #0x0, R12
          CFI FunCall LCD_Printf_8x16
        CALLA   #LCD_Printf_8x16
//  288      LCD_Printf_8x16(0,71,"Threshold: %.0f C",Threshold_temp);    //显示温度阈值
        PUSHX.W &Threshold_temp + 2
          CFI CFA SP+6
        PUSHX.W &Threshold_temp
          CFI CFA SP+8
        MOVA    #`?<Constant "Threshold: %.0f C">`, R14
        MOV.W   #0x47, R13
        MOV.W   #0x0, R12
          CFI FunCall LCD_Printf_8x16
        CALLA   #LCD_Printf_8x16
//  289      //LCD_Printf_8x16(0,55,"Judge Face&Mask!");
//  290      
//  291      //OLED_DispChineseAt(FONT_CHINESE_16X16,4,0,"阈值");
//  292      //OLED_PrintfAt(FONT_ASCII_8X16,4,32,":%.0f",Threshold_temp);     //显示温度阈值
//  293      
//  294      DELAY_MS(200);
        ////////////// Start of 5000000 cycles delay.
        MOV.W   #0x12ce, R15
        MOV.W   #0x13, R14
??main_1:
        ADD.W   #0xffff, R15
        ADDC.W  #0xffff, R14
        JC      ??main_1
        ////////////// End of delay code.
        ADD.W   #0x4, SP
          CFI CFA SP+4
        JMP     ??main_0
        NOP
          CFI EndBlock cfiBlock9
//  295   }
//  296 }

        RSEG DATA20_ID:CONST:SORT:NOROOT(1)
`?<Initializer for Threshold_temp>`:
        DC32 42000000H

        RSEG DATA20_ID:CONST:SORT:NOROOT(1)
`?<Initializer for data>`:
        DC16 1000

        RSEG DATA20_ID:CONST:SORT:NOROOT(1)
`?<Initializer for fdata>`:
        DC32 3F800000H

        RSEG CODE:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG CODE:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
`?<Constant "1">`:
        DC8 "1"

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
`?<Constant "Judge Face&Mask!">`:
        DC8 "Judge Face&Mask!"

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
`?<Constant "2">`:
        DC8 "2"

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
`?<Constant "Learning Faces!  ">`:
        DC8 "Learning Faces!  "

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
`?<Constant "Temp: %.1f C">`:
        DC8 "Temp: %.1f C"

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
`?<Constant "NO MASK!!!      ">`:
        DC8 "NO MASK!!!      "

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
`?<Constant "MASK YES        ">`:
        DC8 "MASK YES        "

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
`?<Constant "%s">`:
        DC8 "%s"

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
`?<Constant "Temp: ">`:
        DC8 "Temp: "

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
`?<Constant "Threshold: %.0f C">`:
        DC8 "Threshold: %.0f C"

        END
// 
// 1 670 bytes in segment CODE
//   114 bytes in segment DATA20_C
//    10 bytes in segment DATA20_I
//    10 bytes in segment DATA20_ID
//   262 bytes in segment DATA20_Z
//   110 bytes in segment ISR_CODE
// 
// 1 780 bytes of CODE  memory
//   124 bytes of CONST memory
//   272 bytes of DATA  memory
//
//Errors: none
//Warnings: none
