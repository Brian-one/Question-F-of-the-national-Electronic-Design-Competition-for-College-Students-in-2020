///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V6.30.1.934/W32 for MSP430          12/Oct/2020  07:56:36
// Copyright 1996-2015 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for Texas Instruments MSP430
//
//    __rt_version  =  3
//    __double_size =  32
//    __reg_r4      =  free
//    __reg_r5      =  free
//    __pic         =  no
//    __core        =  430X
//    __data_model  =  large
//    __code_model  =  large
//    Source file   =  
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\LCD_API\LCD_API.c
//    Command line  =  
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\LCD_API\LCD_API.c
//        -D DEBUG -D RAM_VECTOR -lA
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Debug\List\ -o
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Debug\Obj\ --no_cse
//        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
//        -D__MSP430F5529__ -e --double=32 --dlib_config "D:\Program Files
//        (x86)\IAR Systems\Embedded Workbench 7.2\430\lib\dlib\dl430xllff.h"
//        -I G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Drivers\inc\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Drivers\src\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Drivers\src\USB\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Drivers\src\USB\USB_config\
//        -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Drivers\src\USB\USB_User\
//        -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Drivers\srcUSB\USB_API\USB_CDC_API\
//        -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Drivers\src\USB\USB_API\USB_HID_API\
//        -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Drivers\src\USB\USB_API\USB_MSC_API\
//        -I G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\delay\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\18b20\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\KEY\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\LED\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\12864\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\oled\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\mpu6050\inc\
//        -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\mpu6050\src\
//        -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\nokia5110\inc\
//        -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\nokia5110\src\
//        -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\LQ_1.8_TFT\
//        -I G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\LCD_API\
//        -I G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\2.2TFT\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\nrf24l01\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\System\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\System\inc\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\System\src\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\User\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\User\USER\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Lib\UCOSII\CONFIG\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Lib\uCOSII\App\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Lib\uCOSII\CONFIHG\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Lib\uCOSII\PORT\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Lib\UCOSII\CORE\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Lib\FatFs\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Lib\FatFs\option\ -I
//        G:\比赛\2020电赛\MSP430F5529库函数2.6\MSP430F5529库函数2.6\C版\工程模板\User\USER\
//        --core=430X --data_model=large -On --multiplier=32
//        --hw_workaround=CPU40 --code_model=large
//    List file     =  
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Debug\List\LCD_API.s43
//
///////////////////////////////////////////////////////////////////////////////

        NAME LCD_API

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__code_model", "large"
        RTMODEL "__core", "430X"
        RTMODEL "__data_model", "large"
        RTMODEL "__dlib_file_descriptor", "1"
        RTMODEL "__dlib_full_locale_support", "1"
        RTMODEL "__double_size", "32"
        RTMODEL "__iar_require _Printf", "unknown"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN __iar_HWMUL
        EXTERN ?CopyMemoryWords
        EXTERN ?DivMod16u
        EXTERN ?cstart_init_copy20
        EXTERN ?cstart_init_zero20
        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBLIC BACK_COLOR
        PUBLIC LCD_Clear
        PUBLIC LCD_DispChar
        PUBLIC LCD_DispDecAt
        PUBLIC LCD_DispFolatAt
        PUBLIC LCD_DispStringAt
        PUBLIC LCD_DispStringLen
        PUBLIC LCD_Draw_Circle
        PUBLIC LCD_Draw_Dot
        PUBLIC LCD_Draw_Line
        PUBLIC LCD_Draw_Rectangle
        PUBLIC LCD_FillPart
        PUBLIC LCD_Printf
        PUBLIC LCD_Printf_8x16
        PUBLIC LCD_Show_Picture
        PUBLIC POINT_COLOR
        PUBLIC asc2_1608
        PUBWEAK free
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:20, SP:20, SR:16, R4L:16, R4H:4, R4:20, R5L:16, R5H:4
          CFI Resource R5:20, R6L:16, R6H:4, R6:20, R7L:16, R7H:4, R7:20, R8L:16
          CFI Resource R8H:4, R8:20, R9L:16, R9H:4, R9:20, R10L:16, R10H:4
          CFI Resource R10:20, R11L:16, R11H:4, R11:20, R12L:16, R12H:4, R12:20
          CFI Resource R13L:16, R13H:4, R13:20, R14L:16, R14H:4, R14:20, R15L:16
          CFI Resource R15H:4, R15:20
          CFI ResourceParts R4 R4H, R4L
          CFI ResourceParts R5 R5H, R5L
          CFI ResourceParts R6 R6H, R6L
          CFI ResourceParts R7 R7H, R7L
          CFI ResourceParts R8 R8H, R8L
          CFI ResourceParts R9 R9H, R9L
          CFI ResourceParts R10 R10H, R10L
          CFI ResourceParts R11 R11H, R11L
          CFI ResourceParts R12 R12H, R12L
          CFI ResourceParts R13 R13H, R13L
          CFI ResourceParts R14 R14H, R14L
          CFI ResourceParts R15 R15H, R15L
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L Undefined
          CFI R12H Undefined
          CFI R12 Undefined
          CFI R13L Undefined
          CFI R13H Undefined
          CFI R13 Undefined
          CFI R14L Undefined
          CFI R14H Undefined
          CFI R14 Undefined
          CFI R15L Undefined
          CFI R15H Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon0
        
        EXTERN vsprintf
        EXTERN strlen
        EXTERN LCD_SetPos
        EXTERN LCD_Write_DATA16
        EXTERN _CmpLt32f
        EXTERN _Add32f
        EXTERN _CmpGe32f
        EXTERN _Mul32f
        EXTERN _Div32f
        EXTERN _Cast32fto32s
        EXTERN _Cast32sto32f
        EXTERN _Cast32fto32u
        EXTERN _Cast32uto32f
        EXTERN _Sub32f
        EXTERN __data20_free

// G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\LCD_API\LCD_API.c
//    1 #include "LCD_API.h"
//    2 #include "LCD_FONT.h"

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
// unsigned char const asc2_1608[95][16]
asc2_1608:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 8
        DC8 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 36
        DC8 36, 72, 0, 0, 0, 36, 36, 36, 126, 36, 36, 36, 126, 72, 72, 72, 0, 0
        DC8 0, 16, 16, 60, 82, 82, 80, 80, 48, 28, 18, 82, 82, 60, 16, 0, 0, 0
        DC8 0, 34, 82, 84, 84, 88, 42, 13, 21, 21, 37, 34, 0, 0, 0, 0, 0, 110
        DC8 145, 25, 41, 37, 118, 10, 18, 18, 18, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 2, 4, 4, 6, 0, 0, 64, 32, 16, 16, 8, 8, 8, 8, 8, 8
        DC8 16, 16, 32, 64, 0, 0, 2, 4, 8, 8, 16, 16, 16, 16, 16, 16, 8, 8, 4
        DC8 2, 0, 0, 0, 0, 0, 8, 8, 107, 28, 28, 107, 8, 8, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 16, 16, 16, 254, 16, 16, 16, 0, 0, 0, 0, 0, 2, 4, 4, 6, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 4
        DC8 4, 8, 8, 8, 16, 16, 32, 32, 32, 64, 0, 0, 0, 0, 24, 36, 66, 66, 66
        DC8 66, 66, 66, 66, 36, 24, 0, 0, 0, 0, 0, 124, 16, 16, 16, 16, 16, 16
        DC8 16, 16, 28, 16, 0, 0, 0, 0, 0, 126, 66, 4, 8, 16, 32, 64, 66, 66
        DC8 66, 60, 0, 0, 0, 0, 0, 60, 66, 66, 64, 32, 24, 32, 64, 66, 66, 60
        DC8 0, 0, 0, 0, 0, 248, 32, 32, 254, 34, 36, 36, 40, 48, 48, 32, 0, 0
        DC8 0, 0, 0, 28, 34, 66, 64, 64, 34, 30, 2, 2, 2, 126, 0, 0, 0, 0, 0
        DC8 56, 68, 66, 66, 66, 70, 58, 2, 2, 36, 24, 0, 0, 0, 0, 0, 8, 8, 8, 8
        DC8 8, 16, 16, 32, 32, 66, 126, 0, 0, 0, 0, 0, 60, 66, 66, 66, 36, 24
        DC8 36, 66, 66, 66, 60, 0, 0, 0, 0, 0, 24, 36, 64, 64, 92, 98, 66, 66
        DC8 66, 34, 28, 0, 0, 0, 0, 0, 24, 24, 0, 0, 0, 0, 24, 24, 0, 0, 0, 0
        DC8 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 32
        DC8 16, 8, 4, 2, 4, 8, 16, 32, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 126, 0, 0
        DC8 126, 0, 0, 0, 0, 0, 0, 0, 0, 2, 4, 8, 16, 32, 64, 32, 16, 8, 4, 2
        DC8 0, 0, 0, 0, 0, 24, 24, 0, 16, 16, 16, 32, 70, 66, 66, 60, 0, 0, 0
        DC8 0, 0, 60, 66, 58, 85, 85, 85, 85, 85, 90, 34, 28, 0, 0, 0, 0, 0
        DC8 231, 66, 66, 34, 60, 36, 20, 20, 24, 8, 8, 0, 0, 0, 0, 0, 31, 34
        DC8 66, 66, 66, 34, 30, 34, 34, 34, 31, 0, 0, 0, 0, 0, 28, 34, 66, 1, 1
        DC8 1, 1, 1, 66, 66, 124, 0, 0, 0, 0, 0, 31, 34, 66, 66, 66, 66, 66, 66
        DC8 66, 34, 31, 0, 0, 0, 0, 0, 63, 66, 66, 2, 18, 18, 30, 18, 18, 66
        DC8 63, 0, 0, 0, 0, 0, 7, 2, 2, 2, 18, 18, 30, 18, 18, 66, 63, 0, 0, 0
        DC8 0, 0, 28, 34, 34, 33, 113, 1, 1, 1, 34, 34, 60, 0, 0, 0, 0, 0, 231
        DC8 66, 66, 66, 66, 126, 66, 66, 66, 66, 231, 0, 0, 0, 0, 0, 62, 8, 8
        DC8 8, 8, 8, 8, 8, 8, 8, 62, 0, 0, 0, 15, 17, 16, 16, 16, 16, 16, 16
        DC8 16, 16, 16, 16, 124, 0, 0, 0, 0, 0, 119, 34, 34, 18, 18, 10, 14, 10
        DC8 18, 34, 119, 0, 0, 0, 0, 0, 127, 66, 2, 2, 2, 2, 2, 2, 2, 2, 7, 0
        DC8 0, 0, 0, 0, 107, 42, 42, 42, 42, 54, 54, 54, 54, 54, 119, 0, 0, 0
        DC8 0, 0, 71, 98, 98, 82, 82, 82, 74, 74, 70, 70, 227, 0, 0, 0, 0, 0
        DC8 28, 34, 65, 65, 65, 65, 65, 65, 65, 34, 28, 0, 0, 0, 0, 0, 7, 2, 2
        DC8 2, 2, 62, 66, 66, 66, 66, 63, 0, 0, 0, 0, 96, 28, 50, 77, 65, 65
        DC8 65, 65, 65, 65, 34, 28, 0, 0, 0, 0, 0, 199, 66, 34, 34, 18, 18, 62
        DC8 66, 66, 66, 63, 0, 0, 0, 0, 0, 62, 66, 66, 64, 32, 24, 4, 2, 66, 66
        DC8 124, 0, 0, 0, 0, 0, 28, 8, 8, 8, 8, 8, 8, 8, 8, 73, 127, 0, 0, 0, 0
        DC8 0, 60, 66, 66, 66, 66, 66, 66, 66, 66, 66, 231, 0, 0, 0, 0, 0, 8, 8
        DC8 24, 20, 20, 36, 36, 34, 66, 66, 231, 0, 0, 0, 0, 0, 20, 20, 20, 20
        DC8 54, 42, 42, 42, 42, 42, 107, 0, 0, 0, 0, 0, 231, 66, 36, 36, 24, 24
        DC8 24, 36, 36, 66, 231, 0, 0, 0, 0, 0, 28, 8, 8, 8, 8, 8, 20, 20, 34
        DC8 34, 119, 0, 0, 0, 0, 0, 63, 66, 66, 4, 4, 8, 16, 16, 32, 33, 126, 0
        DC8 0, 0, 0, 120, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 120, 0, 64, 64
        DC8 32, 32, 32, 16, 16, 8, 8, 8, 4, 4, 4, 2, 0, 0, 0, 30, 16, 16, 16
        DC8 16, 16, 16, 16, 16, 16, 16, 16, 16, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 36, 24, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 6, 0, 0, 0, 108
        DC8 50, 34, 44, 48, 34, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 38, 66, 66
        DC8 66, 38, 26, 2, 2, 3, 0, 0, 0, 0, 0, 0, 56, 68, 2, 2, 2, 68, 56, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 220, 98, 66, 66, 66, 66, 124, 64, 64, 96, 0
        DC8 0, 0, 0, 0, 0, 60, 66, 2, 126, 66, 66, 60, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 62, 8, 8, 8, 8, 8, 62, 8, 72, 48, 0, 0, 0, 0, 60, 66, 66, 60, 2
        DC8 28, 34, 34, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 231, 66, 66, 66, 66, 70
        DC8 58, 2, 2, 3, 0, 0, 0, 0, 0, 0, 62, 8, 8, 8, 8, 8, 14, 0, 0, 12, 12
        DC8 0, 0, 0, 30, 34, 32, 32, 32, 32, 32, 32, 56, 0, 0, 48, 48, 0, 0, 0
        DC8 0, 0, 119, 34, 18, 14, 10, 18, 114, 2, 2, 3, 0, 0, 0, 0, 0, 0, 62
        DC8 8, 8, 8, 8, 8, 8, 8, 8, 14, 8, 0, 0, 0, 0, 0, 183, 146, 146, 146
        DC8 146, 146, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 231, 66, 66, 66, 66, 70
        DC8 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 66, 66, 66, 66, 66, 60, 0, 0, 0
        DC8 0, 0, 0, 0, 7, 2, 26, 38, 66, 66, 66, 38, 27, 0, 0, 0, 0, 0, 0, 0
        DC8 224, 64, 88, 100, 66, 66, 66, 100, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 31, 4, 4, 4, 4, 76, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 66, 64, 60
        DC8 2, 66, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 72, 8, 8, 8, 8, 62, 8, 8
        DC8 0, 0, 0, 0, 0, 0, 0, 220, 98, 66, 66, 66, 66, 99, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 8, 8, 20, 20, 34, 34, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36
        DC8 36, 42, 90, 82, 145, 219, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 36, 24
        DC8 24, 24, 36, 110, 0, 0, 0, 0, 0, 0, 0, 6, 8, 8, 24, 24, 36, 36, 66
        DC8 231, 0, 0, 0, 0, 0, 0, 0, 0, 0, 126, 68, 8, 8, 16, 34, 126, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 192, 32, 32, 32, 32, 32, 16, 32, 32, 32, 32, 32, 32
        DC8 192, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16
        DC8 16, 0, 3, 4, 4, 4, 4, 4, 8, 4, 4, 4, 4, 4, 4, 3, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 32, 90, 4
//    3 #include <stdarg.h>
//    4 #include <string.h>
//    5 #include <stdio.h>
//    6 #include <stdlib.h>

        RSEG CODE:CODE:REORDER:NOROOT(1)
// __intrinsic __nounwind __cc_version2 void free(void *)
free:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function free
        PUSHM.A #0x1, R10
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+8
        MOVA    R12, R10
        MOVA    R10, R12
          CFI FunCall __data20_free
        CALLA   #__data20_free
        POPM.A  #0x1, R10
          CFI R10H SameValue
          CFI R10L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock0
//    7 //画笔色,背景色

        RSEG DATA20_I:DATA:SORT:NOROOT(1)
        REQUIRE ?cstart_init_copy20
//    8 uint16_t POINT_COLOR=WHITE,BACK_COLOR=RED1; 
POINT_COLOR:
        DS8 2
        REQUIRE `?<Initializer for POINT_COLOR>`

        RSEG DATA20_I:DATA:SORT:NOROOT(1)
        REQUIRE ?cstart_init_copy20
BACK_COLOR:
        DS8 2
        REQUIRE `?<Initializer for BACK_COLOR>`
//    9 /*************************************************************************
//   10 *  函数名称：
//   11 *  功能说明：部分区域用一种颜色填充
//   12 *  参数说明：
//   13 *  函数返回：
//   14 *  使用示例：
//   15 *************************************************************************/ 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   16 void LCD_FillPart(uint16_t xs,uint16_t ys,uint16_t xe,uint16_t ye,uint16_t color_dat)
LCD_FillPart:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function LCD_FillPart
//   17 {
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        MOV.W   R12, R7
        MOV.W   R13, R6
        MOV.W   R14, R10
        MOV.W   R15, R11
        MOV.W   0x24(SP), R4
//   18   uint16_t i,j;
//   19   LCD_PTLON(xs,ys,xe,ye);
        MOV.W   R11, R15
        MOV.W   R10, R14
        MOV.W   R6, R13
        MOV.W   R7, R12
          CFI FunCall LCD_SetPos
        CALLA   #LCD_SetPos
//   20   for(j=0;j<(ye-ys+1);j++)
        MOV.W   #0x0, R9
??LCD_FillPart_1:
        MOV.W   R11, R15
        SUB.W   R6, R15
        ADD.W   #0x1, R15
        CMP.W   R15, R9
        JC      ??LCD_FillPart_2
//   21   {
//   22     for(i=0;i<(xe-xs+1);i++)
        MOV.W   #0x0, R8
??LCD_FillPart_0:
        MOV.W   R10, R15
        SUB.W   R7, R15
        ADD.W   #0x1, R15
        CMP.W   R15, R8
        JC      ??LCD_FillPart_3
//   23     {
//   24       LCD_WR_WORD(color_dat);
        MOV.W   R4, R12
          CFI FunCall LCD_Write_DATA16
        CALLA   #LCD_Write_DATA16
//   25     }
        ADD.W   #0x1, R8
        JMP     ??LCD_FillPart_0
//   26   }  
??LCD_FillPart_3:
        ADD.W   #0x1, R9
        JMP     ??LCD_FillPart_1
//   27 }
??LCD_FillPart_2:
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock1
//   28 /*************************************************************************
//   29 *  函数名称：
//   30 *  功能说明：全屏用一种颜色填充
//   31 *  参数说明：
//   32 *  函数返回：
//   33 *  使用示例：
//   34 *************************************************************************/ 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   35 void LCD_Clear(uint16_t color)
LCD_Clear:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function LCD_Clear
//   36 {
        PUSHM.A #0x4, R11
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+20
        MOV.W   R12, R10
//   37   unsigned int i,j;	
//   38   LCD_PTLON(0,0,LCD_W,LCD_H);
        MOV.W   #0xa0, R15
        MOV.W   #0x80, R14
        MOV.W   #0x0, R13
        MOV.W   #0x0, R12
          CFI FunCall LCD_SetPos
        CALLA   #LCD_SetPos
//   39   for(i=0;i<=LCD_H;i++)
        MOV.W   #0x0, R11
??LCD_Clear_1:
        CMP.W   #0xa1, R11
        JC      ??LCD_Clear_2
//   40   {
//   41     for(j=0;j<=LCD_W;j++)
        MOV.W   #0x0, R8
??LCD_Clear_0:
        CMP.W   #0x81, R8
        JC      ??LCD_Clear_3
//   42     {
//   43        LCD_WR_WORD(color);
        MOV.W   R10, R12
          CFI FunCall LCD_Write_DATA16
        CALLA   #LCD_Write_DATA16
//   44     }
        ADD.W   #0x1, R8
        JMP     ??LCD_Clear_0
//   45   }
??LCD_Clear_3:
        ADD.W   #0x1, R11
        JMP     ??LCD_Clear_1
//   46 }
??LCD_Clear_2:
        POPM.A  #0x4, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock2
//   47 /*************************************************************************
//   48 *  函数名称：
//   49 *  功能说明：指定位置显示一个字符
//   50 *  参数说明：
//   51 *  函数返回：
//   52 *  使用示例：
//   53 *************************************************************************/ 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   54 void LCD_DispChar(uint16_t x, uint16_t y, char c_dat,uint16_t word_color,uint16_t back_color)
LCD_DispChar:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function LCD_DispChar
//   55 { 
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        MOV.W   R12, R6
        MOV.W   R13, R11
        MOV.B   R14, R10
        MOV.W   R15, R5
        MOV.W   0x24(SP), R4
//   56   if(c_dat<' '||c_dat>'~')return;
        CMP.B   #0x20, R10
        JNC     ??LCD_DispChar_2
        CMP.B   #0x7f, R10
        JC      ??LCD_DispChar_2
//   57   uint16_t i,j;
//   58   char temp;
//   59   c_dat=c_dat-' ';
        ADD.B   #0xe0, R10
//   60   LCD_PTLON(x,y,x+7,y+15);			//定位字符显示区域
        MOV.W   R11, R15
        ADD.W   #0xf, R15
        MOV.W   R6, R14
        ADD.W   #0x7, R14
        MOV.W   R11, R13
        MOV.W   R6, R12
          CFI FunCall LCD_SetPos
        CALLA   #LCD_SetPos
//   61   for(j=0; j < 16; j++)
        MOV.W   #0x0, R9
??LCD_DispChar_1:
        CMP.W   #0x10, R9
        JC      ??LCD_DispChar_2
//   62   {
//   63     temp=asc2_1608[c_dat][j];
        MOV.B   R10, R15
        RLAM.A  #0x4, R15
        ADDA    R9, R15
        MOVX.B  asc2_1608(R15), R7
//   64     for(i=0; i<8; i++)
        MOV.W   #0x0, R8
??LCD_DispChar_0:
        CMP.W   #0x8, R8
        JC      ??LCD_DispChar_5
//   65     {
//   66       if((temp) & (0x01<<i))
        MOV.W   #0x1, R14
        SUB.B   #0x1, R8
        JN      ??LCD_DispChar_6
        RPT     R8
        RLAX.W  R14
??LCD_DispChar_6:
        ADD.B   #0x1, R8
        BIT.B   R14, R7
        JEQ     ??LCD_DispChar_7
//   67       { 
//   68         LCD_WR_WORD(word_color);
        MOV.W   R5, R12
          CFI FunCall LCD_Write_DATA16
        CALLA   #LCD_Write_DATA16
        JMP     ??LCD_DispChar_8
//   69       }
//   70       else
//   71       {
//   72         LCD_WR_WORD(back_color);
??LCD_DispChar_7:
        MOV.W   R4, R12
          CFI FunCall LCD_Write_DATA16
        CALLA   #LCD_Write_DATA16
//   73       }
//   74     }
??LCD_DispChar_8:
        ADD.W   #0x1, R8
        JMP     ??LCD_DispChar_0
//   75   }
??LCD_DispChar_5:
        ADD.W   #0x1, R9
        JMP     ??LCD_DispChar_1
//   76 }
??LCD_DispChar_2:
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock3
//   77 /*************************************************************************
//   78 *  函数名称：
//   79 *  功能说明：
//   80 *  参数说明：
//   81 *  函数返回：
//   82 *  使用示例：
//   83 *************************************************************************/ 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   84 void LCD_DispStringLen(uint16_t x, uint16_t y, char *s_dat,int num,uint16_t word_color,uint16_t back_color)
LCD_DispStringLen:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function LCD_DispStringLen
//   85 {
        PUSHM.A #0x6, R11
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+28
        MOV.W   R12, R10
        MOV.W   R13, R11
        MOVA    R14, R8
        MOV.W   R15, R9
        MOV.W   0x1c(SP), R7
        MOV.W   0x1e(SP), R6
//   86   while(num--)
??LCD_DispStringLen_0:
        MOV.W   R9, R15
        MOV.W   R15, R9
        ADD.W   #0xffff, R9
        CMP.W   #0x0, R15
        JEQ     ??LCD_DispStringLen_1
//   87   {
//   88     LCD_DispChar( x, y,*s_dat++, word_color, back_color);
        PUSH.W  R6
          CFI CFA SP+30
        MOV.W   R7, R15
        MOV.B   @R8, R14
        MOV.W   R11, R13
        MOV.W   R10, R12
          CFI FunCall LCD_DispChar
        CALLA   #LCD_DispChar
        ADDA    #0x1, R8
//   89     x+=8;
        ADD.W   #0x8, R10
//   90     if(x>LCD_W-8)
        ADD.W   #0x2, SP
          CFI CFA SP+28
        CMP.W   #0x79, R10
        JNC     ??LCD_DispStringLen_0
//   91     {
//   92        x=0;
        MOV.W   #0x0, R10
//   93        y+=16;
        ADD.W   #0x10, R11
        JMP     ??LCD_DispStringLen_0
//   94     }
//   95   }
//   96 }
??LCD_DispStringLen_1:
        POPM.A  #0x6, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock4
//   97 /*************************************************************************
//   98 *  函数名称：
//   99 *  功能说明：指定位置显示一个字符串
//  100 *  参数说明：
//  101 *  函数返回：
//  102 *  使用示例：
//  103 *************************************************************************/ 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  104 void LCD_DispStringAt(uint16_t x, uint16_t y, char *s_dat,uint16_t word_color,uint16_t back_color)
LCD_DispStringAt:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function LCD_DispStringAt
//  105 {
        PUSHM.A #0x6, R11
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+28
        MOV.W   R12, R10
        MOV.W   R13, R11
        MOVA    R14, R8
        MOV.W   R15, R6
        MOV.W   0x1c(SP), R9
//  106   while(*s_dat!='\0') 
??LCD_DispStringAt_0:
        CMP.B   #0x0, 0(R8)
        JEQ     ??LCD_DispStringAt_1
//  107   {
//  108     LCD_DispChar(x, y, *s_dat++,word_color,back_color);
        PUSH.W  R9
          CFI CFA SP+30
        MOV.W   R6, R15
        MOV.B   @R8, R14
        MOV.W   R11, R13
        MOV.W   R10, R12
          CFI FunCall LCD_DispChar
        CALLA   #LCD_DispChar
        ADDA    #0x1, R8
//  109     x+=8;
        ADD.W   #0x8, R10
//  110     if(x>LCD_W-8)
        ADD.W   #0x2, SP
          CFI CFA SP+28
        CMP.W   #0x79, R10
        JNC     ??LCD_DispStringAt_0
//  111     {
//  112        x=0;
        MOV.W   #0x0, R10
//  113        y+=16;
        ADD.W   #0x10, R11
        JMP     ??LCD_DispStringAt_0
//  114     }
//  115   }
//  116 }
??LCD_DispStringAt_1:
        POPM.A  #0x6, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock5
//  117 /*************************************************************************
//  118 *  函数名称：
//  119 *  功能说明：指定位置显示一个整数
//  120 *  参数说明：
//  121 *  函数返回：
//  122 *  使用示例：
//  123 *************************************************************************/ 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  124 void LCD_DispDecAt(uint16_t x,uint16_t y,int number,uint16_t word_color,uint16_t back_color)
LCD_DispDecAt:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function LCD_DispDecAt
//  125 { 
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        PUSH.W  R12
          CFI CFA SP+38
        SUB.W   #0x8, SP
          CFI CFA SP+46
        MOV.W   R13, R5
        MOV.W   R14, R11
        MOV.W   R15, R4
        MOV.W   0x2e(SP), R7
//  126   char str[7],j,k=0,i;
        MOV.B   #0x0, R6
//  127   unsigned int c=10000;
        MOV.W   #0x2710, R9
//  128   if(number<0)
        CMP.W   #0x0, R11
        JGE     ??LCD_DispDecAt_1
//  129     {str[0]='-';number=-number;}
        MOV.B   #0x2d, 0(SP)
        XOR.W   #0xffff, R11
        ADD.W   #0x1, R11
        JMP     ??LCD_DispDecAt_2
//  130   else str[0]=' ';
??LCD_DispDecAt_1:
        MOV.B   #0x20, 0(SP)
//  131   for( i=1;i<=5;i++)
??LCD_DispDecAt_2:
        MOV.B   #0x1, R10
??LCD_DispDecAt_0:
        CMP.B   #0x6, R10
        JC      ??LCD_DispDecAt_3
//  132   {
//  133     j=number/c%10;
        MOV.W   R11, R12
        MOV.W   R9, R14
          CFI FunCall ?DivMod16u
        CALLA   #?DivMod16u
        MOV.W   #0xa, R14
          CFI FunCall ?DivMod16u
        CALLA   #?DivMod16u
        MOV.B   R14, R8
//  134     if(j==0&&k==0&&i<5)
        CMP.B   #0x0, R8
        JNE     ??LCD_DispDecAt_4
        CMP.B   #0x0, R6
        JNE     ??LCD_DispDecAt_4
        CMP.B   #0x5, R10
        JC      ??LCD_DispDecAt_4
//  135     {
//  136       str[i]=' ';
        MOV.B   R10, R15
        ADD.W   SP, R15
        MOV.B   #0x20, 0(R15)
        JMP     ??LCD_DispDecAt_5
//  137     }
//  138     else
//  139     {
//  140       k=1;
??LCD_DispDecAt_4:
        MOV.B   #0x1, R6
//  141       str[i]=j+'0';
        MOV.B   R8, R14
        ADD.B   #0x30, R14
        MOV.B   R10, R15
        ADD.W   SP, R15
        MOV.B   R14, 0(R15)
//  142     }
//  143     c/=10;
??LCD_DispDecAt_5:
        MOV.W   R9, R12
        MOV.W   #0xa, R14
          CFI FunCall ?DivMod16u
        CALLA   #?DivMod16u
        MOV.W   R12, R9
//  144   }
        ADD.B   #0x1, R10
        JMP     ??LCD_DispDecAt_0
//  145   str[6]='\0';
??LCD_DispDecAt_3:
        MOV.B   #0x0, 0x6(SP)
//  146   LCD_DispStringAt(x,y,str,word_color,back_color);
        PUSH.W  R7
          CFI CFA SP+48
        MOV.W   R4, R15
        MOV.W   SP, R14
        ADD.W   #0x2, R14
        MOV.W   R5, R13
        MOV.W   0xa(SP), R12
          CFI FunCall LCD_DispStringAt
        CALLA   #LCD_DispStringAt
//  147 }
        ADD.W   #0xc, SP
          CFI CFA SP+36
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock6
//  148 /*************************************************************************
//  149 *  函数名称：
//  150 *  功能说明：指定位置显示一个浮点数，注意若是之前显示的浮点数位数多余当前的，则可能会保留上一次的显示
//  151 *  参数说明：
//  152 *  函数返回：
//  153 *  使用示例：
//  154 *************************************************************************/ 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  155 void LCD_DispFolatAt(uint16_t x,uint16_t y,float number,int decimals,uint16_t word_color,uint16_t back_color)
LCD_DispFolatAt:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function LCD_DispFolatAt
//  156 {
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        PUSH.W  R12
          CFI CFA SP+38
        PUSH.W  R13
          CFI CFA SP+40
        SUB.W   #0x28, SP
          CFI CFA SP+80
        MOV.W   R14, R10
        MOV.W   R15, R11
        MOV.W   0x50(SP), R4
//  157   const float _fround[6]={0.49,0.05,0.005,0.0005,0.00005,0.000005};
        MOV.W   SP, R12
        ADD.W   #0x10, R12
        MOV.W   #`?<Constant {(4.90000009E-1F), (5.0000000744E-2`, R14
        MOV.W   #0xc, R13
          CFI FunCall ?CopyMemoryWords
        CALLA   #?CopyMemoryWords
//  158   char Str[15];
//  159   char * str=Str;
        MOV.W   SP, R8
//  160   float scale;
//  161   unsigned char i,d;
//  162   if (number<0.0) {number=-number; *str++='-';};
        MOV.W   #0x0, R14
        MOV.W   #0x0, R15
        MOV.W   R10, R12
        MOV.W   R11, R13
          CFI FunCall _CmpLt32f
        CALLA   #_CmpLt32f
        CMP.W   #0x0, R12
        JEQ     ??LCD_DispFolatAt_3
        XOR.W   #0x8000, R11
        MOV.B   #0x2d, 0(R8)
        ADDA    #0x1, R8
//  163   if (decimals>5) decimals=5;
??LCD_DispFolatAt_3:
        CMP.W   #0x6, R4
        JL      ??LCD_DispFolatAt_4
        MOV.W   #0x5, R4
//  164   number=number+_fround[decimals];
??LCD_DispFolatAt_4:
        MOV.W   R4, R15
        RLAM.W  #0x2, R15
        ADD.W   SP, R15
        MOV.W   0x10(R15), R14
        MOV.W   0x12(R15), R15
        MOV.W   R10, R12
        MOV.W   R11, R13
          CFI FunCall _Add32f
        CALLA   #_Add32f
        MOV.W   R12, R10
        MOV.W   R13, R11
//  165   i=0;
        MOV.B   #0x0, R9
//  166   scale=1.0;
        MOV.W   #0x0, R6
        MOV.W   #0x3f80, R7
//  167   while (number>=scale) {scale=scale*10.0; ++i;};
??LCD_DispFolatAt_0:
        MOV.W   R6, R14
        MOV.W   R7, R15
        MOV.W   R10, R12
        MOV.W   R11, R13
          CFI FunCall _CmpGe32f
        CALLA   #_CmpGe32f
        CMP.W   #0x0, R12
        JEQ     ??LCD_DispFolatAt_5
        MOV.W   #0x0, R14
        MOV.W   #0x4120, R15
        MOV.W   R6, R12
        MOV.W   R7, R13
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   R12, R6
        MOV.W   R13, R7
        ADD.B   #0x1, R9
        JMP     ??LCD_DispFolatAt_0
//  168   if (i==0) *str++='0';
??LCD_DispFolatAt_5:
        CMP.B   #0x0, R9
        JNE     ??LCD_DispFolatAt_1
        MOV.B   #0x30, 0(R8)
        ADDA    #0x1, R8
        JMP     ??LCD_DispFolatAt_6
//  169   else
//  170     while (i--)
??LCD_DispFolatAt_1:
        MOV.B   R9, R14
        MOV.B   R14, R9
        ADD.B   #0xff, R9
        CMP.B   #0x0, R14
        JEQ     ??LCD_DispFolatAt_6
//  171     {
//  172       scale=(float)((int32_t)(0.5+scale/10.0));
        MOV.W   #0x0, R14
        MOV.W   #0x4120, R15
        MOV.W   R6, R12
        MOV.W   R7, R13
          CFI FunCall _Div32f
        CALLA   #_Div32f
        MOV.W   #0x0, R14
        MOV.W   #0x3f00, R15
          CFI FunCall _Add32f
        CALLA   #_Add32f
        MOV.W   R12, R14
        MOV.W   R13, R15
        MOV.W   R14, R12
        MOV.W   R15, R13
          CFI FunCall _Cast32fto32s
        CALLA   #_Cast32fto32s
          CFI FunCall _Cast32sto32f
        CALLA   #_Cast32sto32f
        MOV.W   R12, R6
        MOV.W   R13, R7
//  173       d=(unsigned char) (number/scale);
        MOV.W   R6, R14
        MOV.W   R7, R15
        MOV.W   R10, R12
        MOV.W   R11, R13
          CFI FunCall _Div32f
        CALLA   #_Div32f
          CFI FunCall _Cast32fto32u
        CALLA   #_Cast32fto32u
        MOV.B   R12, R5
//  174       *str++=d+'0';
        MOV.B   R5, R14
        ADD.B   #0x30, R14
        MOV.B   R14, 0(R8)
        ADDA    #0x1, R8
//  175       number=number-scale*d;
        MOV.B   R5, R5
        MOV.W   R5, R12
        MOV.W   #0x0, R13
          CFI FunCall _Cast32uto32f
        CALLA   #_Cast32uto32f
        MOV.W   R6, R14
        MOV.W   R7, R15
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   R12, R14
        MOV.W   R13, R15
        MOV.W   R10, R12
        MOV.W   R11, R13
          CFI FunCall _Sub32f
        CALLA   #_Sub32f
        MOV.W   R12, R10
        MOV.W   R13, R11
        JMP     ??LCD_DispFolatAt_1
//  176      };
//  177   if (decimals==0) {*str=0; LCD_DispStringAt(x,y,Str,word_color,back_color);return;};
??LCD_DispFolatAt_6:
        CMP.W   #0x0, R4
        JNE     ??LCD_DispFolatAt_7
        MOV.B   #0x0, 0(R8)
        PUSH.W  0x56(SP)
          CFI CFA SP+82
        MOV.W   0x54(SP), R15
        MOV.W   SP, R14
        ADD.W   #0x2, R14
        MOV.W   0x2a(SP), R13
        MOV.W   0x2c(SP), R12
          CFI FunCall LCD_DispStringAt
        CALLA   #LCD_DispStringAt
        ADD.W   #0x2, SP
          CFI CFA SP+80
        JMP     ??LCD_DispFolatAt_8
//  178   *str++='.';
??LCD_DispFolatAt_7:
        MOV.B   #0x2e, 0(R8)
        ADDA    #0x1, R8
//  179   while (decimals--)
??LCD_DispFolatAt_2:
        MOV.W   R4, R15
        MOV.W   R15, R4
        ADD.W   #0xffff, R4
        CMP.W   #0x0, R15
        JEQ     ??LCD_DispFolatAt_9
//  180   {
//  181     number=number*10.0;
        MOV.W   #0x0, R14
        MOV.W   #0x4120, R15
        MOV.W   R10, R12
        MOV.W   R11, R13
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   R12, R10
        MOV.W   R13, R11
//  182     d=(unsigned char)number;
        MOV.W   R10, R12
        MOV.W   R11, R13
          CFI FunCall _Cast32fto32u
        CALLA   #_Cast32fto32u
        MOV.B   R12, R5
//  183     *str++=d+'0';
        MOV.B   R5, R14
        ADD.B   #0x30, R14
        MOV.B   R14, 0(R8)
        ADDA    #0x1, R8
//  184     number=number-d;
        MOV.B   R5, R5
        MOV.W   R5, R12
        MOV.W   #0x0, R13
          CFI FunCall _Cast32uto32f
        CALLA   #_Cast32uto32f
        MOV.W   R12, R14
        MOV.W   R13, R15
        MOV.W   R10, R12
        MOV.W   R11, R13
          CFI FunCall _Sub32f
        CALLA   #_Sub32f
        MOV.W   R12, R10
        MOV.W   R13, R11
        JMP     ??LCD_DispFolatAt_2
//  185   }
//  186   *str=0;
??LCD_DispFolatAt_9:
        MOV.B   #0x0, 0(R8)
//  187   LCD_DispStringAt(x,y,Str,word_color,back_color);
        PUSH.W  0x56(SP)
          CFI CFA SP+82
        MOV.W   0x54(SP), R15
        MOV.W   SP, R14
        ADD.W   #0x2, R14
        MOV.W   0x2a(SP), R13
        MOV.W   0x2c(SP), R12
          CFI FunCall LCD_DispStringAt
        CALLA   #LCD_DispStringAt
//  188 }
        ADD.W   #0x2, SP
          CFI CFA SP+80
??LCD_DispFolatAt_8:
        ADD.W   #0x2c, SP
          CFI CFA SP+36
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock7

        RSEG DATA16_C:CONST:SORT:NOROOT(1)
`?<Constant {(4.90000009E-1F), (5.0000000744E-2`:
        DC32 3EFAE148H, 3D4CCCCDH, 3BA3D70AH, 3A03126FH, 3851B717H, 36A7C5ACH
//  189 /*************************************************************************
//  190 *  函数名称：
//  191 *  功能说明：指定两个点连线
//  192 *  参数说明：
//  193 *  函数返回：
//  194 *  使用示例：
//  195 *************************************************************************/ 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  196 void LCD_Draw_Line(uint16_t xs,uint16_t ys,uint16_t xe,uint16_t ye,uint16_t color_dat)
LCD_Draw_Line:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function LCD_Draw_Line
//  197 {
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        SUB.W   #0x8, SP
          CFI CFA SP+44
        MOV.W   R12, R10
        MOV.W   R13, R11
        MOV.W   R14, R4
        MOV.W   R15, R7
//  198   uint16_t i,ds;
//  199   int dx,dy,inc_x, inc_y;
//  200   int xerr = 0, yerr = 0;				//初始化变量
        MOV.W   #0x0, R6
        MOV.W   #0x0, R9
//  201 
//  202   if(xs==xe)	  						//如果是画垂直线则只需对竖直坐标计数
        CMP.W   R4, R10
        JNE     ??LCD_Draw_Line_3
//  203   {
//  204     LCD_PTLON(xs,ys,xe,ye);//LCD_SetPos(xs,ys,xe,ye);
        MOV.W   R7, R15
        MOV.W   R4, R14
        MOV.W   R11, R13
        MOV.W   R10, R12
          CFI FunCall LCD_SetPos
        CALLA   #LCD_SetPos
//  205     for(i=0;i<(ye-ys+1);i++)
        MOV.W   #0x0, R8
??LCD_Draw_Line_0:
        MOV.W   R7, R15
        SUB.W   R11, R15
        ADD.W   #0x1, R15
        CMP.W   R15, R8
        JC      ??LCD_Draw_Line_4
//  206     {
//  207        LCD_WR_WORD(color_dat);
        MOV.W   0x2c(SP), R12
          CFI FunCall LCD_Write_DATA16
        CALLA   #LCD_Write_DATA16
//  208     }
        ADD.W   #0x1, R8
        JMP     ??LCD_Draw_Line_0
//  209   }
//  210   else if(ys==ye)						//如果是水平线则只需要对水平坐标计数
??LCD_Draw_Line_3:
        CMP.W   R7, R11
        JNE     ??LCD_Draw_Line_5
//  211   {
//  212     LCD_PTLON(xs,ys,xe,ye);//LCD_SetPos(xs,ys,xe,ye);
        MOV.W   R7, R15
        MOV.W   R4, R14
        MOV.W   R11, R13
        MOV.W   R10, R12
          CFI FunCall LCD_SetPos
        CALLA   #LCD_SetPos
//  213     for(i=0;i<(xe-xs+1);i++)
        MOV.W   #0x0, R8
??LCD_Draw_Line_1:
        MOV.W   R4, R15
        SUB.W   R10, R15
        ADD.W   #0x1, R15
        CMP.W   R15, R8
        JC      ??LCD_Draw_Line_4
//  214     {
//  215        LCD_WR_WORD(color_dat);
        MOV.W   0x2c(SP), R12
          CFI FunCall LCD_Write_DATA16
        CALLA   #LCD_Write_DATA16
//  216     }
        ADD.W   #0x1, R8
        JMP     ??LCD_Draw_Line_1
//  217   } 
//  218   else											//如果是斜线，则重新计算，使用画点函数画出直线
//  219   {
//  220     dx = xe - xs;								//计算坐标增量
??LCD_Draw_Line_5:
        MOV.W   R4, R15
        SUB.W   R10, R15
        MOV.W   R15, 0(SP)
//  221     dy = ye - ys;
        MOV.W   R7, R15
        SUB.W   R11, R15
        MOV.W   R15, R5
//  222 
//  223     if(dx > 0) inc_x = 1;						//设置单步方向
        CMP.W   #0x1, 0(SP)
        JL      ??LCD_Draw_Line_6
        MOV.W   #0x1, 0x6(SP)
        JMP     ??LCD_Draw_Line_7
//  224     else 
//  225     {
//  226       inc_x = -1; dx = -dx;
??LCD_Draw_Line_6:
        MOV.W   #0xffff, 0x6(SP)
        MOV.W   @SP, R15
        XOR.W   #0xffff, R15
        ADD.W   #0x1, R15
        MOV.W   R15, 0(SP)
//  227     }
//  228     if(dy > 0) inc_y = 1;						//设置单步方向
??LCD_Draw_Line_7:
        CMP.W   #0x1, R5
        JL      ??LCD_Draw_Line_8
        MOV.W   #0x1, 0x4(SP)
        JMP     ??LCD_Draw_Line_9
//  229     else
//  230     {
//  231       inc_y = -1; dy = -dy;
??LCD_Draw_Line_8:
        MOV.W   #0xffff, 0x4(SP)
        XOR.W   #0xffff, R5
        ADD.W   #0x1, R5
//  232     }
//  233 
//  234     if(dx > dy) ds = dx;						//选取基本增量坐标轴
??LCD_Draw_Line_9:
        CMP.W   @SP, R5
        JGE     ??LCD_Draw_Line_10
        MOV.W   @SP, 0x2(SP)
        JMP     ??LCD_Draw_Line_11
//  235     else		
//  236       ds = dy;
??LCD_Draw_Line_10:
        MOV.W   R5, 0x2(SP)
//  237     for(i = 0; i <= ds+1; i++)					//画线输出
??LCD_Draw_Line_11:
        MOV.W   #0x0, R8
??LCD_Draw_Line_2:
        MOV.W   0x2(SP), R15
        ADD.W   #0x1, R15
        CMP.W   R8, R15
        JNC     ??LCD_Draw_Line_4
//  238     {
//  239       LCD_PTLON(xs,ys,xe,ye);//LCD_draw_dot(xs, ys,color_dat);	//画点
        MOV.W   R7, R15
        MOV.W   R4, R14
        MOV.W   R11, R13
        MOV.W   R10, R12
          CFI FunCall LCD_SetPos
        CALLA   #LCD_SetPos
//  240       xerr += dx;
        ADD.W   @SP, R6
//  241       yerr += dy;
        ADD.W   R5, R9
//  242       if(xerr > ds)
        CMP.W   R6, 0x2(SP)
        JC      ??LCD_Draw_Line_12
//  243       {
//  244         xerr -= ds;
        SUB.W   0x2(SP), R6
//  245         xs   += inc_x;
        ADD.W   0x6(SP), R10
//  246       }
//  247       if(yerr > ds)
??LCD_Draw_Line_12:
        CMP.W   R9, 0x2(SP)
        JC      ??LCD_Draw_Line_13
//  248       {
//  249         yerr -= ds;
        SUB.W   0x2(SP), R9
//  250         ys   += inc_y;
        ADD.W   0x4(SP), R11
//  251       }
//  252     }
??LCD_Draw_Line_13:
        ADD.W   #0x1, R8
        JMP     ??LCD_Draw_Line_2
//  253   }  
//  254 }
??LCD_Draw_Line_4:
        ADD.W   #0x8, SP
          CFI CFA SP+36
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock8
//  255 /*************************************************************************
//  256 *  函数名称：
//  257 *  功能说明：指定位置画一个长方形
//  258 *  参数说明：
//  259 *  函数返回：
//  260 *  使用示例：
//  261 *************************************************************************/ 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  262 void LCD_Draw_Rectangle(uint16_t xs,uint16_t ys,uint16_t xe,uint16_t ye,uint16_t color_dat)
LCD_Draw_Rectangle:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function LCD_Draw_Rectangle
//  263 {
        PUSHM.A #0x6, R11
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+28
        MOV.W   R12, R6
        MOV.W   R13, R10
        MOV.W   R14, R11
        MOV.W   R15, R8
        MOV.W   0x1c(SP), R9
//  264   LCD_Draw_Line(xs,ys,xs,ye,color_dat);	  //画矩形左边
        PUSH.W  R9
          CFI CFA SP+30
        MOV.W   R8, R15
        MOV.W   R6, R14
        MOV.W   R10, R13
        MOV.W   R6, R12
          CFI FunCall LCD_Draw_Line
        CALLA   #LCD_Draw_Line
//  265   LCD_Draw_Line(xe,ys,xe,ye,color_dat);	  //画矩形右边
        PUSH.W  R9
          CFI CFA SP+32
        MOV.W   R8, R15
        MOV.W   R11, R14
        MOV.W   R10, R13
        MOV.W   R11, R12
          CFI FunCall LCD_Draw_Line
        CALLA   #LCD_Draw_Line
//  266   LCD_Draw_Line(xs,ys,xe,ys,color_dat);	  //画矩形上边
        PUSH.W  R9
          CFI CFA SP+34
        MOV.W   R10, R15
        MOV.W   R11, R14
        MOV.W   R10, R13
        MOV.W   R6, R12
          CFI FunCall LCD_Draw_Line
        CALLA   #LCD_Draw_Line
//  267   LCD_Draw_Line(xs,ye,xe,ye,color_dat);	  //画矩形下边
        PUSH.W  R9
          CFI CFA SP+36
        MOV.W   R8, R15
        MOV.W   R11, R14
        MOV.W   R8, R13
        MOV.W   R6, R12
          CFI FunCall LCD_Draw_Line
        CALLA   #LCD_Draw_Line
//  268 }
        ADD.W   #0x8, SP
          CFI CFA SP+28
        POPM.A  #0x6, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock9
//  269 /*************************************************************************
//  270 *  函数名称：
//  271 *  功能说明：指定位置画一个确定半径的圆
//  272 *  参数说明：
//  273 *  函数返回：
//  274 *  使用示例：
//  275 *************************************************************************/ 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  276 void LCD_Draw_Circle(uint16_t x,uint16_t y,uint16_t r,uint16_t color_dat)
LCD_Draw_Circle:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function LCD_Draw_Circle
//  277 {
        PUSHM.A #0x6, R11
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+28
        MOV.W   R12, R11
        MOV.W   R13, R8
        MOV.W   R14, R7
        MOV.W   R15, R10
//  278   unsigned char dx, dy = r; 
        PUSH.W  R9
          CFI CFA SP+30
        MOV.B   R7, 0(SP)
        POP.W   R9
          CFI CFA SP+28
//  279   if((x>=r) &&((128-x)>=r) && (y>=r) && ((160-y)>=r))		//确定所画圆在屏幕范围内，没有超出最外边，(暂不支持与屏幕边相交)
        CMP.W   R7, R11
        JNC     ??LCD_Draw_Circle_2
        MOV.W   #0x80, R15
        SUB.W   R11, R15
        CMP.W   R7, R15
        JNC     ??LCD_Draw_Circle_2
        CMP.W   R7, R8
        JNC     ??LCD_Draw_Circle_2
        MOV.W   #0xa0, R15
        SUB.W   R8, R15
        CMP.W   R7, R15
        JNC     ??LCD_Draw_Circle_2
//  280   {
//  281     for(dx = 0; dx <= r; dx++)
        MOV.B   #0x0, R6
??LCD_Draw_Circle_1:
        MOV.B   R6, R6
        CMP.W   R6, R7
        JNC     ??LCD_Draw_Circle_2
//  282     {
//  283       while((r * r + 1 - dx * dx) < (dy * dy)) dy--;
??LCD_Draw_Circle_0:
        MOV.W   #0x1, R15
        PUSH.W  SR
          CFI CFA SP+30
        DINT
        NOP
        MOV.W   R7, &__iar_HWMUL               // MPY
        MOV.W   R7, &__iar_HWMUL + 8           // OP2
        ADD.W   &__iar_HWMUL + 10, R15         // RESLO
        NOP
        POP.W   SR
          CFI CFA SP+28
        PUSH.W  SR
          CFI CFA SP+30
        DINT
        NOP
        MOV.B   R6, &__iar_HWMUL               // MPY
        MOV.B   R6, &__iar_HWMUL + 8           // OP2
        SUB.W   &__iar_HWMUL + 10, R15         // RESLO
        NOP
        POP.W   SR
          CFI CFA SP+28
        PUSH.W  SR
          CFI CFA SP+30
        DINT
        NOP
        MOV.B   R9, &__iar_HWMUL               // MPY
        MOV.B   R9, &__iar_HWMUL + 8           // OP2
        MOV.W   &__iar_HWMUL + 10, R14         // RESLO
        NOP
        POP.W   SR
          CFI CFA SP+28
        CMP.W   R14, R15
        JC      ??LCD_Draw_Circle_3
        ADD.B   #0xff, R9
        JMP     ??LCD_Draw_Circle_0
//  284       LCD_Draw_Dot(x + dx, y - dy, color_dat);
??LCD_Draw_Circle_3:
        MOV.W   R10, R14
        MOV.B   R9, R9
        MOV.W   R8, R13
        SUB.W   R9, R13
        MOV.B   R6, R6
        MOV.W   R11, R12
        ADD.W   R6, R12
          CFI FunCall LCD_Draw_Dot
        CALLA   #LCD_Draw_Dot
//  285       LCD_Draw_Dot(x - dx, y - dy, color_dat);
        MOV.W   R10, R14
        MOV.B   R9, R9
        MOV.W   R8, R13
        SUB.W   R9, R13
        MOV.B   R6, R6
        MOV.W   R11, R12
        SUB.W   R6, R12
          CFI FunCall LCD_Draw_Dot
        CALLA   #LCD_Draw_Dot
//  286       LCD_Draw_Dot(x - dx, y + dy, color_dat);
        MOV.W   R10, R14
        MOV.B   R9, R9
        MOV.W   R8, R13
        ADD.W   R9, R13
        MOV.B   R6, R6
        MOV.W   R11, R12
        SUB.W   R6, R12
          CFI FunCall LCD_Draw_Dot
        CALLA   #LCD_Draw_Dot
//  287       LCD_Draw_Dot(x + dx, y + dy, color_dat);
        MOV.W   R10, R14
        MOV.B   R9, R9
        MOV.W   R8, R13
        ADD.W   R9, R13
        MOV.B   R6, R6
        MOV.W   R11, R12
        ADD.W   R6, R12
          CFI FunCall LCD_Draw_Dot
        CALLA   #LCD_Draw_Dot
//  288       LCD_Draw_Dot(x + dy, y - dx, color_dat);
        MOV.W   R10, R14
        MOV.B   R6, R6
        MOV.W   R8, R13
        SUB.W   R6, R13
        MOV.B   R9, R9
        MOV.W   R11, R12
        ADD.W   R9, R12
          CFI FunCall LCD_Draw_Dot
        CALLA   #LCD_Draw_Dot
//  289       LCD_Draw_Dot(x - dy, y - dx, color_dat);
        MOV.W   R10, R14
        MOV.B   R6, R6
        MOV.W   R8, R13
        SUB.W   R6, R13
        MOV.B   R9, R9
        MOV.W   R11, R12
        SUB.W   R9, R12
          CFI FunCall LCD_Draw_Dot
        CALLA   #LCD_Draw_Dot
//  290       LCD_Draw_Dot(x - dy, y + dx, color_dat);
        MOV.W   R10, R14
        MOV.B   R6, R6
        MOV.W   R8, R13
        ADD.W   R6, R13
        MOV.B   R9, R9
        MOV.W   R11, R12
        SUB.W   R9, R12
          CFI FunCall LCD_Draw_Dot
        CALLA   #LCD_Draw_Dot
//  291       LCD_Draw_Dot(x + dy, y + dx, color_dat);
        MOV.W   R10, R14
        MOV.B   R6, R6
        MOV.W   R8, R13
        ADD.W   R6, R13
        MOV.B   R9, R9
        MOV.W   R11, R12
        ADD.W   R9, R12
          CFI FunCall LCD_Draw_Dot
        CALLA   #LCD_Draw_Dot
//  292     }
        ADD.B   #0x1, R6
        JMP     ??LCD_Draw_Circle_1
//  293   }
//  294 }
??LCD_Draw_Circle_2:
        POPM.A  #0x6, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock10
//  295 /*************************************************************************
//  296 *  函数名称：
//  297 *  功能说明：指定位置画一个点
//  298 *  参数说明：
//  299 *  函数返回：
//  300 *  使用示例：
//  301 *************************************************************************/ 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  302 void  LCD_Draw_Dot(uint16_t x,uint16_t y,uint16_t color_dat)
LCD_Draw_Dot:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function LCD_Draw_Dot
//  303 {
        PUSHM.A #0x4, R11
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+20
        MOV.W   R12, R10
        MOV.W   R13, R11
        MOV.W   R14, R8
//  304   LCD_PTLON(x,y,x,y); 
        MOV.W   R11, R15
        MOV.W   R10, R14
        MOV.W   R11, R13
        MOV.W   R10, R12
          CFI FunCall LCD_SetPos
        CALLA   #LCD_SetPos
//  305   LCD_WR_WORD(color_dat);
        MOV.W   R8, R12
          CFI FunCall LCD_Write_DATA16
        CALLA   #LCD_Write_DATA16
//  306 }
        POPM.A  #0x4, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock11
//  307 /*************************************************************************
//  308 *  函数名称：
//  309 *  功能说明：指定区域显示一副图像
//  310 *  参数说明：
//  311 *  函数返回：
//  312 *  使用示例：
//  313 *************************************************************************/ 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  314 void LCD_Show_Picture(uint16_t xs,uint16_t ys,uint16_t xe,uint16_t ye,uint16_t pic[])
LCD_Show_Picture:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function LCD_Show_Picture
//  315 {
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        MOV.W   R12, R4
        MOV.W   R13, R7
        MOV.W   R14, R6
        MOV.W   R15, R11
        MOVA    0x24(SP), R5
//  316   unsigned int i,j,k=0;
        MOV.W   #0x0, R10
//  317 
//  318   LCD_PTLON(xs,ys,xe,ye);
        MOV.W   R11, R15
        MOV.W   R6, R14
        MOV.W   R7, R13
        MOV.W   R4, R12
          CFI FunCall LCD_SetPos
        CALLA   #LCD_SetPos
//  319   for(i=0;i<ye-ys;i++)
        MOV.W   #0x0, R8
??LCD_Show_Picture_1:
        MOV.W   R11, R15
        SUB.W   R7, R15
        CMP.W   R15, R8
        JC      ??LCD_Show_Picture_2
//  320   { 
//  321     for(j=0;j<xe-xs;j++)
        MOV.W   #0x0, R9
??LCD_Show_Picture_0:
        MOV.W   R6, R15
        SUB.W   R4, R15
        CMP.W   R15, R9
        JC      ??LCD_Show_Picture_3
//  322     {
//  323       LCD_WR_WORD(pic[k++]);	
        MOV.W   R10, R15
        ADDA    R15, R15
        ADDA    R5, R15
        MOV.W   @R15, R12
          CFI FunCall LCD_Write_DATA16
        CALLA   #LCD_Write_DATA16
        ADD.W   #0x1, R10
//  324     }
        ADD.W   #0x1, R9
        JMP     ??LCD_Show_Picture_0
//  325   }
??LCD_Show_Picture_3:
        ADD.W   #0x1, R8
        JMP     ??LCD_Show_Picture_1
//  326 }
??LCD_Show_Picture_2:
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock12
//  327 /*************************************************************************
//  328 *  函数名称：LCD_Printf_8x16
//  329 *  功能说明：显示字符串
//  330 *  参数说明：
//  331 *  函数返回：无
//  332 *  使用示例：LCD_Printf_8x16("Hello!:i=%d,J=%f",i,1.0);  //发送一个字符串
//  333 *************************************************************************/  

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  334 void LCD_Printf_8x16(uint16_t x,uint16_t y,const char * fmt,...)
LCD_Printf_8x16:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function LCD_Printf_8x16
//  335 {
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        SUB.W   #0x4, SP
          CFI CFA SP+40
        MOV.W   R12, R10
        MOV.W   R13, R11
        MOVA    R14, R5
//  336   static char LCD_String[256];
//  337   va_list ap;
//  338   va_start(ap,fmt);
        MOV.W   SP, R15
        ADD.W   #0x28, R15
        MOVA    R15, 0(SP)
//  339   vsprintf(LCD_String,fmt,ap);
        PUSH.W  0x4(SP)
          CFI CFA SP+42
        PUSH.W  0x4(SP)
          CFI CFA SP+44
        MOVA    R5, R13
        MOVA    #??LCD_String, R12
          CFI FunCall vsprintf
        CALLA   #vsprintf
//  340   uint8_t lastposition=0;
        MOV.B   #0x0, R8
//  341   int length=strlen(LCD_String);
        MOVA    #??LCD_String, R12
          CFI FunCall strlen
        CALLA   #strlen
        MOV.W   R12, R6
        MOV.W   R13, R7
//  342   int TEXT_SIZE=LCD_W/8;
        MOV.W   #0x10, R4
//  343   for(int i=0;i <= length;i++)
        MOV.W   #0x0, R9
        ADD.W   #0x4, SP
          CFI CFA SP+40
??LCD_Printf_8x16_2:
        CMP.W   R9, R6
        JL      ??LCD_Printf_8x16_4
//  344   {
//  345     if(LCD_String[i] == '\n')
        MOV.W   R9, R15
        CMPX.B  #0xa, ??LCD_String(R15)
        JNE     ??LCD_Printf_8x16_5
//  346     {
//  347       uint8_t position=i;
        PUSH.W  R7
          CFI CFA SP+42
        MOV.B   R9, 0(SP)
        POP.W   R7
          CFI CFA SP+40
//  348       while(position>lastposition)
??LCD_Printf_8x16_0:
        CMP.B   R7, R8
        JC      ??LCD_Printf_8x16_3
//  349       {
//  350         if((position-lastposition)>TEXT_SIZE)//如果一行要显示的字符串数量大于16，则需要换行
        MOV.B   R7, R15
        MOV.B   R8, R8
        SUB.W   R8, R15
        CMP.W   R15, R4
        JGE     ??LCD_Printf_8x16_6
//  351         {
//  352            LCD_DispStringLen(x,y,&LCD_String[lastposition],TEXT_SIZE,POINT_COLOR,BACK_COLOR);
        PUSHX.W &BACK_COLOR
          CFI CFA SP+42
        PUSHX.W &POINT_COLOR
          CFI CFA SP+44
        MOV.W   R4, R15
        MOV.B   R8, R14
        ADDA    #??LCD_String, R14
        MOV.W   R11, R13
        MOV.W   R10, R12
          CFI FunCall LCD_DispStringLen
        CALLA   #LCD_DispStringLen
//  353            y+=16;//换行
        ADD.W   #0x10, R11
//  354            x=0;
        MOV.W   #0x0, R10
//  355            lastposition+=TEXT_SIZE;
        ADD.B   R4, R8
        ADD.W   #0x4, SP
          CFI CFA SP+40
        JMP     ??LCD_Printf_8x16_0
//  356         }
//  357         else
//  358         {
//  359           LCD_DispStringLen(x,y,&LCD_String[lastposition],(position-lastposition),POINT_COLOR,BACK_COLOR);
??LCD_Printf_8x16_6:
        PUSHX.W &BACK_COLOR
          CFI CFA SP+42
        PUSHX.W &POINT_COLOR
          CFI CFA SP+44
        MOV.B   R7, R15
        MOV.B   R8, R8
        SUB.W   R8, R15
        MOV.B   R8, R14
        ADDA    #??LCD_String, R14
        MOV.W   R11, R13
        MOV.W   R10, R12
          CFI FunCall LCD_DispStringLen
        CALLA   #LCD_DispStringLen
//  360           for(x+=(position-lastposition)*8;x < LCD_W;x+=8)   //将该行未显示的部分清零
        MOV.B   R7, R15
        MOV.B   R8, R8
        SUB.W   R8, R15
        RLAM.W  #0x3, R15
        ADD.W   R15, R10
        ADD.W   #0x4, SP
          CFI CFA SP+40
??LCD_Printf_8x16_1:
        CMP.W   #0x80, R10
        JC      ??LCD_Printf_8x16_3
//  361           {
//  362              LCD_DispChar(x,y,' ',POINT_COLOR,BACK_COLOR);
        PUSHX.W &BACK_COLOR
          CFI CFA SP+42
        MOVX.W  &POINT_COLOR, R15
        MOV.B   #0x20, R14
        MOV.W   R11, R13
        MOV.W   R10, R12
          CFI FunCall LCD_DispChar
        CALLA   #LCD_DispChar
//  363           }
        ADD.W   #0x8, R10
        ADD.W   #0x2, SP
          CFI CFA SP+40
        JMP     ??LCD_Printf_8x16_1
//  364           break;
//  365         }
//  366       } 
//  367       lastposition=position+1;
??LCD_Printf_8x16_3:
        MOV.B   R7, R14
        ADD.B   #0x1, R14
        MOV.B   R14, R8
//  368       //换行后X=0,y下移一行
//  369       x=0;
        MOV.W   #0x0, R10
//  370       y+=16;
        ADD.W   #0x10, R11
//  371       if(y>=LCD_H)y=0;
        CMP.W   #0xa0, R11
        JNC     ??LCD_Printf_8x16_5
        MOV.W   #0x0, R11
//  372     }
//  373   }
??LCD_Printf_8x16_5:
        ADD.W   #0x1, R9
        JMP     ??LCD_Printf_8x16_2
//  374   if(lastposition<length)
??LCD_Printf_8x16_4:
        MOV.B   R8, R8
        CMP.W   R6, R8
        JGE     ??LCD_Printf_8x16_7
//  375     LCD_DispStringLen(x,y,&LCD_String[lastposition],(length-lastposition),POINT_COLOR,BACK_COLOR);
        PUSHX.W &BACK_COLOR
          CFI CFA SP+42
        PUSHX.W &POINT_COLOR
          CFI CFA SP+44
        MOV.B   R8, R8
        MOV.W   R6, R15
        SUB.W   R8, R15
        MOV.B   R8, R14
        ADDA    #??LCD_String, R14
        MOV.W   R11, R13
        MOV.W   R10, R12
          CFI FunCall LCD_DispStringLen
        CALLA   #LCD_DispStringLen
        ADD.W   #0x4, SP
          CFI CFA SP+40
//  376   va_end(ap);
//  377   free(LCD_String);
??LCD_Printf_8x16_7:
        MOVA    #??LCD_String, R12
          CFI FunCall free
        CALLA   #free
//  378 }
        ADD.W   #0x4, SP
          CFI CFA SP+36
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock13

        RSEG DATA20_Z:DATA:SORT:NOROOT(0)
        REQUIRE ?cstart_init_zero20
??LCD_String:
        DS8 256
//  379 /*************************************************************************
//  380 *  函数名称：LCD_Printf
//  381 *  功能说明：显示字符串
//  382 *  参数说明：
//  383 *  函数返回：无
//  384 *  使用示例：LCD_Printf"Hello!:i=%d,J=%f",i,1.0);  //发送一个字符串
//  385 *************************************************************************/  

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  386 void LCD_Printf(const char * fmt,...)
LCD_Printf:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function LCD_Printf
//  387 {
        PUSHM.A #0x6, R11
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+28
        SUB.W   #0x4, SP
          CFI CFA SP+32
        MOVA    R12, R7
//  388   static char LCD_String[256];
//  389   static uint16_t x=0,y=0;
//  390   va_list ap;
//  391   va_start(ap,fmt);
        MOV.W   SP, R15
        ADD.W   #0x20, R15
        MOVA    R15, 0(SP)
//  392   vsprintf(LCD_String,fmt,ap);
        PUSH.W  0x4(SP)
          CFI CFA SP+34
        PUSH.W  0x4(SP)
          CFI CFA SP+36
        MOVA    R7, R13
        MOVA    #??LCD_String_1, R12
          CFI FunCall vsprintf
        CALLA   #vsprintf
//  393   uint8_t lastposition=0;
        MOV.B   #0x0, R10
//  394   int length=strlen(LCD_String);          
        MOVA    #??LCD_String_1, R12
          CFI FunCall strlen
        CALLA   #strlen
        MOV.W   R12, R6
//  395   int TEXT_SIZE=LCD_W/8;
        MOV.W   #0x10, R9
//  396   for(int i=0;i<=length;i++)
        MOV.W   #0x0, R11
        ADD.W   #0x4, SP
          CFI CFA SP+32
??LCD_Printf_2:
        CMP.W   R11, R6
        JL      ??LCD_Printf_6
//  397   {
//  398     if(LCD_String[i]=='\n')     //遇到换行符
        MOV.W   R11, R15
        CMPX.B  #0xa, ??LCD_String_1(R15)
        JNE     ??LCD_Printf_7
//  399     {
//  400       uint8_t position=i;
        PUSH.W  R8
          CFI CFA SP+34
        MOV.B   R11, 0(SP)
        POP.W   R8
          CFI CFA SP+32
//  401       while(position>lastposition)  //若有一段字符串没有显示，则显示完为止
??LCD_Printf_0:
        CMP.B   R8, R10
        JC      ??LCD_Printf_5
//  402       {
//  403         if((position-lastposition)>TEXT_SIZE)//如果一行要显示的字符串数量大于16，则需要换行
        MOV.B   R8, R15
        MOV.B   R10, R10
        SUB.W   R10, R15
        CMP.W   R15, R9
        JGE     ??LCD_Printf_8
//  404         {
//  405            LCD_DispStringLen(x,y,&LCD_String[lastposition],TEXT_SIZE,POINT_COLOR,BACK_COLOR);
        PUSHX.W &BACK_COLOR
          CFI CFA SP+34
        PUSHX.W &POINT_COLOR
          CFI CFA SP+36
        MOV.W   R9, R15
        MOV.B   R10, R14
        ADDA    #??LCD_String_1, R14
        MOVX.W  &??y, R13
        MOVX.W  &??x, R12
          CFI FunCall LCD_DispStringLen
        CALLA   #LCD_DispStringLen
//  406            y+=16;//换行
        ADDX.W  #0x10, &??y
//  407            if(y>=LCD_H)
        ADD.W   #0x4, SP
          CFI CFA SP+32
        CMPX.W  #0xa0, &??y
        JNC     ??LCD_Printf_9
//  408            {
//  409              y=0;
        MOVX.W  #0x0, &??y
//  410              LCD_Clear(BACK_COLOR);
        MOVX.W  &BACK_COLOR, R12
          CFI FunCall LCD_Clear
        CALLA   #LCD_Clear
//  411            }
//  412            x=0;
??LCD_Printf_9:
        MOVX.W  #0x0, &??x
//  413            lastposition+=TEXT_SIZE;
        ADD.B   R9, R10
        JMP     ??LCD_Printf_0
//  414         }
//  415         else
//  416         {
//  417           LCD_DispStringLen(x,y,&LCD_String[lastposition],(position-lastposition),POINT_COLOR,BACK_COLOR);
??LCD_Printf_8:
        PUSHX.W &BACK_COLOR
          CFI CFA SP+34
        PUSHX.W &POINT_COLOR
          CFI CFA SP+36
        MOV.B   R8, R15
        MOV.B   R10, R10
        SUB.W   R10, R15
        MOV.B   R10, R14
        ADDA    #??LCD_String_1, R14
        MOVX.W  &??y, R13
        MOVX.W  &??x, R12
          CFI FunCall LCD_DispStringLen
        CALLA   #LCD_DispStringLen
//  418           for(x+=(position-lastposition)*8;x < LCD_W;x+=8)   //将该行未显示的部分清零
        MOV.B   R8, R15
        MOV.B   R10, R10
        SUB.W   R10, R15
        RLAM.W  #0x3, R15
        ADDX.W  R15, &??x
        ADD.W   #0x4, SP
          CFI CFA SP+32
??LCD_Printf_1:
        CMPX.W  #0x80, &??x
        JC      ??LCD_Printf_5
//  419           {
//  420              LCD_DispChar(x,y,' ',POINT_COLOR,BACK_COLOR);
        PUSHX.W &BACK_COLOR
          CFI CFA SP+34
        MOVX.W  &POINT_COLOR, R15
        MOV.B   #0x20, R14
        MOVX.W  &??y, R13
        MOVX.W  &??x, R12
          CFI FunCall LCD_DispChar
        CALLA   #LCD_DispChar
//  421           }
        ADDX.W  #0x8, &??x
        ADD.W   #0x2, SP
          CFI CFA SP+32
        JMP     ??LCD_Printf_1
//  422           break;
//  423         }
//  424       } 
//  425       lastposition=position+1;
??LCD_Printf_5:
        MOV.B   R8, R14
        ADD.B   #0x1, R14
        MOV.B   R14, R10
//  426       //换行后X=0,y下移一行
//  427       x=0;
        MOVX.W  #0x0, &??x
//  428       y+=16;
        ADDX.W  #0x10, &??y
//  429       if(y>=LCD_H)
        CMPX.W  #0xa0, &??y
        JNC     ??LCD_Printf_7
//  430       {
//  431         y=0;
        MOVX.W  #0x0, &??y
//  432         LCD_Clear(BACK_COLOR);
        MOVX.W  &BACK_COLOR, R12
          CFI FunCall LCD_Clear
        CALLA   #LCD_Clear
//  433       }
//  434     }
//  435   }
??LCD_Printf_7:
        ADD.W   #0x1, R11
        JMP     ??LCD_Printf_2
//  436   if(lastposition<length)
??LCD_Printf_6:
        MOV.B   R10, R10
        CMP.W   R6, R10
        JGE     ??LCD_Printf_10
//  437   {
//  438     LCD_DispStringLen(x,y,&LCD_String[lastposition],(length-lastposition),POINT_COLOR,BACK_COLOR);
        PUSHX.W &BACK_COLOR
          CFI CFA SP+34
        PUSHX.W &POINT_COLOR
          CFI CFA SP+36
        MOV.B   R10, R10
        MOV.W   R6, R15
        SUB.W   R10, R15
        MOV.B   R10, R14
        ADDA    #??LCD_String_1, R14
        MOVX.W  &??y, R13
        MOVX.W  &??x, R12
          CFI FunCall LCD_DispStringLen
        CALLA   #LCD_DispStringLen
//  439     x+=(length-lastposition)*8;
        MOV.B   R10, R10
        MOV.W   R6, R15
        SUB.W   R10, R15
        RLAM.W  #0x3, R15
        ADDX.W  R15, &??x
        ADD.W   #0x4, SP
          CFI CFA SP+32
//  440     while(x>=LCD_W)
??LCD_Printf_3:
        CMPX.W  #0x80, &??x
        JNC     ??LCD_Printf_11
//  441     {
//  442        y+=16;
        ADDX.W  #0x10, &??y
//  443        x-=LCD_W;
        ADDX.W  #0xff80, &??x
//  444        if(y>=LCD_H)
        CMPX.W  #0xa0, &??y
        JNC     ??LCD_Printf_3
//  445        {
//  446          y=0;
        MOVX.W  #0x0, &??y
//  447          LCD_Clear(BACK_COLOR);
        MOVX.W  &BACK_COLOR, R12
          CFI FunCall LCD_Clear
        CALLA   #LCD_Clear
        JMP     ??LCD_Printf_3
//  448        }
//  449     }
//  450     for(int i=x;i < LCD_W;i++)   //将该行未显示的部分清零
??LCD_Printf_11:
        MOVX.W  &??x, R11
??LCD_Printf_4:
        CMP.W   #0x80, R11
        JGE     ??LCD_Printf_10
//  451     {
//  452       LCD_DispChar(i,y,' ',POINT_COLOR,BACK_COLOR);
        PUSHX.W &BACK_COLOR
          CFI CFA SP+34
        MOVX.W  &POINT_COLOR, R15
        MOV.B   #0x20, R14
        MOVX.W  &??y, R13
        MOV.W   R11, R12
          CFI FunCall LCD_DispChar
        CALLA   #LCD_DispChar
//  453     }
        ADD.W   #0x1, R11
        ADD.W   #0x2, SP
          CFI CFA SP+32
        JMP     ??LCD_Printf_4
//  454   }
//  455   va_end(ap);
//  456 }
??LCD_Printf_10:
        ADD.W   #0x4, SP
          CFI CFA SP+28
        POPM.A  #0x6, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock14

        RSEG DATA20_Z:DATA:SORT:NOROOT(0)
        REQUIRE ?cstart_init_zero20
??LCD_String_1:
        DS8 256

        RSEG DATA20_Z:DATA:SORT:NOROOT(1)
        REQUIRE ?cstart_init_zero20
??x:
        DS8 2

        RSEG DATA20_Z:DATA:SORT:NOROOT(1)
        REQUIRE ?cstart_init_zero20
??y:
        DS8 2

        RSEG DATA20_ID:CONST:SORT:NOROOT(1)
`?<Initializer for POINT_COLOR>`:
        DC16 65535

        RSEG DATA20_ID:CONST:SORT:NOROOT(1)
`?<Initializer for BACK_COLOR>`:
        DC16 255

        RSEG CODE:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG CODE:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
// 
// 2 484 bytes in segment CODE
//    24 bytes in segment DATA16_C
// 1 520 bytes in segment DATA20_C
//     4 bytes in segment DATA20_I
//     4 bytes in segment DATA20_ID
//   516 bytes in segment DATA20_Z
// 
// 2 470 bytes of CODE  memory (+ 14 bytes shared)
// 1 548 bytes of CONST memory
//   520 bytes of DATA  memory
//
//Errors: none
//Warnings: none
