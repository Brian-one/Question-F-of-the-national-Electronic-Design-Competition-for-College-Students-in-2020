///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V6.30.1.934/W32 for MSP430          12/Oct/2020  03:29:55
// Copyright 1996-2015 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for Texas Instruments MSP430
//
//    __rt_version  =  3
//    __double_size =  32
//    __reg_r4      =  free
//    __reg_r5      =  free
//    __pic         =  no
//    __core        =  430X
//    __data_model  =  large
//    __code_model  =  large
//    Source file   =  
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\User\USER\LMT70.c
//    Command line  =  
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\User\USER\LMT70.c -D
//        DEBUG -D RAM_VECTOR -lA
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Debug\List\ -o
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Debug\Obj\ --no_cse
//        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
//        -D__MSP430F5529__ -e --double=32 --dlib_config "D:\Program Files
//        (x86)\IAR Systems\Embedded Workbench 7.2\430\lib\dlib\dl430xllff.h"
//        -I G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Drivers\inc\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Drivers\src\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Drivers\src\USB\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Drivers\src\USB\USB_config\
//        -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Drivers\src\USB\USB_User\
//        -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Drivers\srcUSB\USB_API\USB_CDC_API\
//        -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Drivers\src\USB\USB_API\USB_HID_API\
//        -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Drivers\src\USB\USB_API\USB_MSC_API\
//        -I G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\delay\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\18b20\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\KEY\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\LED\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\12864\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\oled\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\mpu6050\inc\
//        -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\mpu6050\src\
//        -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\nokia5110\inc\
//        -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\nokia5110\src\
//        -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\LQ_1.8_TFT\
//        -I G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\LCD_API\
//        -I G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\2.2TFT\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\HardWare\nrf24l01\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\System\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\System\inc\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\System\src\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\User\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\User\USER\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Lib\UCOSII\CONFIG\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Lib\uCOSII\App\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Lib\uCOSII\CONFIHG\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Lib\uCOSII\PORT\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Lib\UCOSII\CORE\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Lib\FatFs\ -I
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Lib\FatFs\option\ -I
//        G:\比赛\2020电赛\MSP430F5529库函数2.6\MSP430F5529库函数2.6\C版\工程模板\User\USER\
//        --core=430X --data_model=large -On --multiplier=32
//        --hw_workaround=CPU40 --code_model=large
//    List file     =  
//        G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\Debug\List\LMT70.s43
//
///////////////////////////////////////////////////////////////////////////////

        NAME LMT70

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__code_model", "large"
        RTMODEL "__core", "430X"
        RTMODEL "__data_model", "large"
        RTMODEL "__dlib_file_descriptor", "1"
        RTMODEL "__double_size", "32"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBLIC Temp_1
        PUBLIC Temp_2
        PUBLIC Temp_3
        PUBLIC Temp_adc
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:20, SP:20, SR:16, R4L:16, R4H:4, R4:20, R5L:16, R5H:4
          CFI Resource R5:20, R6L:16, R6H:4, R6:20, R7L:16, R7H:4, R7:20, R8L:16
          CFI Resource R8H:4, R8:20, R9L:16, R9H:4, R9:20, R10L:16, R10H:4
          CFI Resource R10:20, R11L:16, R11H:4, R11:20, R12L:16, R12H:4, R12:20
          CFI Resource R13L:16, R13H:4, R13:20, R14L:16, R14H:4, R14:20, R15L:16
          CFI Resource R15H:4, R15:20
          CFI ResourceParts R4 R4H, R4L
          CFI ResourceParts R5 R5H, R5L
          CFI ResourceParts R6 R6H, R6L
          CFI ResourceParts R7 R7H, R7L
          CFI ResourceParts R8 R8H, R8L
          CFI ResourceParts R9 R9H, R9L
          CFI ResourceParts R10 R10H, R10L
          CFI ResourceParts R11 R11H, R11L
          CFI ResourceParts R12 R12H, R12L
          CFI ResourceParts R13 R13H, R13L
          CFI ResourceParts R14 R14H, R14L
          CFI ResourceParts R15 R15H, R15L
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L Undefined
          CFI R12H Undefined
          CFI R12 Undefined
          CFI R13L Undefined
          CFI R13H Undefined
          CFI R13 Undefined
          CFI R14L Undefined
          CFI R14H Undefined
          CFI R14 Undefined
          CFI R15L Undefined
          CFI R15H Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon0
        
        EXTERN _Mul32f
        EXTERN _Add32f
        EXTERN ADC_ReadChanelOnce
        EXTERN _Cast32uto32f
        EXTERN _Div32f

// G:\比赛\2020电赛\代码\MSP430\测试功能\工程模板\User\USER\LMT70.c
//    1 #include "math.h"
//    2 #include "msp430f5529_adc.h"
//    3 #include "LMT70.h"
//    4 /*-------------------------------------------------------------------------------
//    5 *  本部分主要为LMT70数据的采集                         
//    6 --------------------------------------------------------------------------------*/
//    7 #define a2     -8.451576E-06    //二阶拟合参数
//    8 #define b2     -1.769281E-01    //二阶拟合参数
//    9 #define c2     2.043937E+02     //二阶拟合参数
//   10 //T = aV^2+bV+c
//   11 
//   12 #define a3     -1.064200E-09    //三阶拟合参数
//   13 #define b3     -5.759725E-06    //三阶拟合参数
//   14 #define c3     -1.789883E-01    //三阶拟合参数
//   15 #define d3     2.048570E+02     //三阶拟合参数
//   16 //T = aV^3+bV^2+cV+d
//   17 
//   18 /*******************************************************************************
//   19 *  函数名称：Temp_adc()                           
//   20 *  功能说明：转换一次并读取LMT70的结果
//   21 *  参数说明：无
//   22 *  函数返回：电压(mV)
//   23 *  使用示例：无
//   24 ********************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   25 float Temp_adc()
Temp_adc:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function Temp_adc
//   26 {
//   27   return (ADC_ReadChanelOnce  (ADC_CH1)*2.5/4095*1000);
        MOV.W   #0x2, R12
          CFI FunCall ADC_ReadChanelOnce
        CALLA   #ADC_ReadChanelOnce
        MOV.W   #0x0, R13
          CFI FunCall _Cast32uto32f
        CALLA   #_Cast32uto32f
        MOV.W   #0x0, R14
        MOV.W   #0x4020, R15
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   #0xf000, R14
        MOV.W   #0x457f, R15
          CFI FunCall _Div32f
        CALLA   #_Div32f
        MOV.W   #0x0, R14
        MOV.W   #0x447a, R15
          CFI FunCall _Mul32f
        BRA     #_Mul32f
          CFI EndBlock cfiBlock0
//   28 }
//   29 
//   30 /*******************************************************************************
//   31 *  函数名称：Temp_1                           
//   32 *  功能说明：一阶线性函数计算温度 适用于20℃-30℃
//   33 *  参数说明：无
//   34 *  函数返回：温度
//   35 *  使用示例：无
//   36 ********************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   37 float Temp_1()
Temp_1:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function Temp_1
//   38 {
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
//   39   float T_adc = Temp_adc();
          CFI FunCall Temp_adc
        CALLA   #Temp_adc
        MOV.W   R12, R10
        MOV.W   R13, R11
//   40   float T_m1 = -1.193 * T_adc + 212.009;
        MOV.W   #0xb439, R14
        MOV.W   #0xbf98, R15
        MOV.W   R10, R12
        MOV.W   R11, R13
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   #0x24e, R14
        MOV.W   #0x4354, R15
          CFI FunCall _Add32f
        CALLA   #_Add32f
//   41   return T_m1;
        POPM.A  #0x2, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock1
//   42 }
//   43 
//   44 /*******************************************************************************
//   45 *  函数名称：Temp_2                           
//   46 *  功能说明：二阶线性函数计算温度 适用于-55℃-150℃
//   47 *  参数说明：无
//   48 *  函数返回：温度
//   49 *  使用示例：无
//   50 ********************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   51 float Temp_2()
Temp_2:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function Temp_2
//   52 {
        PUSHM.A #0x6, R11
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+28
//   53   float T_adc = Temp_adc();
          CFI FunCall Temp_adc
        CALLA   #Temp_adc
        MOV.W   R12, R8
        MOV.W   R13, R9
//   54   float T_m2 = a2 * T_adc * T_adc + b2 * T_adc + c2;
        MOV.W   #0xcb3e, R14
        MOV.W   #0xb70d, R15
        MOV.W   R8, R12
        MOV.W   R9, R13
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   R12, R10
        MOV.W   R13, R11
        MOV.W   #0x2ca4, R14
        MOV.W   #0xbe35, R15
        MOV.W   R8, R12
        MOV.W   R9, R13
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   R12, R6
        MOV.W   R13, R7
        MOV.W   R8, R14
        MOV.W   R9, R15
        MOV.W   R10, R12
        MOV.W   R11, R13
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   R6, R14
        MOV.W   R7, R15
          CFI FunCall _Add32f
        CALLA   #_Add32f
        MOV.W   R12, R10
        MOV.W   R13, R11
        MOV.W   #0x64ca, R14
        MOV.W   #0x434c, R15
        MOV.W   R10, R12
        MOV.W   R11, R13
          CFI FunCall _Add32f
        CALLA   #_Add32f
//   55   return T_m2;
        POPM.A  #0x6, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock2
//   56 }
//   57 
//   58 /*******************************************************************************
//   59 *  函数名称：Temp_3                          
//   60 *  功能说明：三阶线性函数计算温度 适用于-55℃-150℃
//   61 *  参数说明：无
//   62 *  函数返回：温度
//   63 *  使用示例：无
//   64 ********************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   65 float Temp_3()
Temp_3:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function Temp_3
//   66 {
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
//   67   float T_adc = Temp_adc();
          CFI FunCall Temp_adc
        CALLA   #Temp_adc
        MOV.W   R12, R8
        MOV.W   R13, R9
//   68   float T_m3 = a3 * T_adc * T_adc * T_adc + b3 * T_adc * T_adc + c3 * T_adc + d3;
        MOV.W   #0x4335, R14
        MOV.W   #0xb092, R15
        MOV.W   R8, R12
        MOV.W   R9, R13
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   R12, R10
        MOV.W   R13, R11
        MOV.W   R8, R14
        MOV.W   R9, R15
        MOV.W   R10, R12
        MOV.W   R11, R13
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   R12, R6
        MOV.W   R13, R7
        MOV.W   #0x43a9, R14
        MOV.W   #0xb6c1, R15
        MOV.W   R8, R12
        MOV.W   R9, R13
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   R12, R10
        MOV.W   R13, R11
        MOV.W   R8, R14
        MOV.W   R9, R15
        MOV.W   R10, R12
        MOV.W   R11, R13
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   R12, R4
        MOV.W   R13, R5
        MOV.W   R8, R14
        MOV.W   R9, R15
        MOV.W   R6, R12
        MOV.W   R7, R13
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   R12, R10
        MOV.W   R13, R11
        MOV.W   #0x48b5, R14
        MOV.W   #0xbe37, R15
        MOV.W   R8, R12
        MOV.W   R9, R13
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   R12, R6
        MOV.W   R13, R7
        MOV.W   R4, R14
        MOV.W   R5, R15
        MOV.W   R10, R12
        MOV.W   R11, R13
          CFI FunCall _Add32f
        CALLA   #_Add32f
        MOV.W   R6, R14
        MOV.W   R7, R15
          CFI FunCall _Add32f
        CALLA   #_Add32f
        MOV.W   R12, R10
        MOV.W   R13, R11
        MOV.W   #0xdb64, R14
        MOV.W   #0x434c, R15
        MOV.W   R10, R12
        MOV.W   R11, R13
          CFI FunCall _Add32f
        CALLA   #_Add32f
//   69   return T_m3;
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock3
//   70 }

        RSEG CODE:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG CODE:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
//   71 
//   72 
// 
// 342 bytes in segment CODE
// 
// 342 bytes of CODE memory
//
//Errors: none
//Warnings: none
